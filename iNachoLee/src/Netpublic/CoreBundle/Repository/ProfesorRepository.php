<?php

namespace Netpublic\CoreBundle\Repository;
use Netpublic\CoreBundle\Entity\Profesor;
use Netpublic\CoreBundle\Entity\Dimension;
use Doctrine\ORM\EntityRepository;

/**
 * ProfesorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfesorRepository extends EntityRepository
{
        public function generarFechasEntregasProfesor(Profesor $profe,Dimension $entity) {
            $em=  $this->getEntityManager();
        //VErificamos que el profe no tenga la fechade entrefga para gener
            $query="SELECT count(a) FROM NetpublicCoreBundle:Profesorperiodoentrega a ";
            $query.="WHERE  a.profesor=:profesor_id";
            $query.=" AND a.periodo=:periodo_id";                         
            $query = $em->createQuery($query)
                            ->setParameters(array(
                           "periodo_id"=>$entity->getId(),                           
                            "profesor_id"=>$profe->getId()    
                            ));
         $count = $query->getSingleScalarResult();
         if($count==0){   
                    $entrega=new \Netpublic\CoreBundle\Entity\Profesorperiodoentrega();
                    $entrega->setFechaFinal($entity->getFechaFinal());
                    $entrega->setFechaInicio($entity->getFechaInicio());
                    $entrega->setProfesor($profe);
                    $entrega->setPeriodo($entity);
                    $em->persist($entrega);   
         }          
            $query="SELECT count(a) FROM NetpublicCoreBundle:PublicacionPeriodosProfesores a ";
            $query.="WHERE  a.profesor=:profesor_id";
            $query.=" AND a.periodo_academico=:periodo_id";                         
            $query = $em->createQuery($query)
                            ->setParameters(array(
                           "periodo_id"=>$entity->getId(),                           
                            "profesor_id"=>$profe->getId()    
                            ));
         $count = $query->getSingleScalarResult();
         if($count==0){
                    //Para determinar si publicaron las notas
                    $estado_publicacion_ntas= new \Netpublic\CoreBundle\Entity\PublicacionPeriodosProfesores();
                    $estado_publicacion_ntas->setPeriodoAcademico($entity);
                    $estado_publicacion_ntas->setProfesor($profe);
                    $estado_publicacion_ntas->setTipo(0);
                    $em->persist($estado_publicacion_ntas);
         }
                    return $count;
    }
    public function getNroNotasModificadasAsignatura($asignatura_id,$grupo_id,$periodo_id,$fecha_ultima_publicacion) {
        $em=  $this->getEntityManager();
        $sql="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d  ";
        $sql.="JOIN a_d.alumno a ";
        $sql.="JOIN a_d.dimension d ";
        $sql.="WHERE (";
        $sql.=" (a.grupo=:grupo_id and a_d.asignatura=:asignatura_id and d.tipo=4) ";
        $sql.=" and d.padre=:id_periodo";
        $sql.=" and a_d.fecha_ultimo_cambio>:fecha";        
        $sql.=" and a_d.es_modificada=true)";                
         
        $nro_horarios_aulas=$em->createQuery($sql)                         
                              ->setParameters(array(             
                                         "asignatura_id"=>$asignatura_id,
                                         "grupo_id" =>$grupo_id,
                                         "fecha"=>$fecha_ultima_publicacion,
                                         "id_periodo" => $periodo_id))
                                  ->getSingleScalarResult();
            
        return $nro_horarios_aulas;
    }

    public function getNroNotasIngresadasAsignatura($asignatura_id,$grupo_id,$periodo_id) {
        $em=  $this->getEntityManager();
        $query="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.alumno a JOIN a_d.asignatura asg  JOIN a_d.dimension d";
        $query.=" WHERE";
        $query.=" (";
        $query.=" d.padre=:periodo_id";
        $query.=" AND asg.id=:asignatura_id";
        $query.=" AND a_d.es_ingresadad=true";
        $query.=" AND d.tipo=4 ";        
        $query.=" AND a.id IN ( ";
        $query.=" SELECT al FROM NetpublicCoreBundle:MatriculaAlumno ma JOIN ma.alumno al JOIN ma.grupo g";
        $query.=" WHERE ";
        $query.=" (";
        $query.=" ma.grupo=:grupo_id";
        $query.=" )))"; 
        
        $nro_horarios_aulas=$em->createQuery($query)                
                     ->setParameters(array(
                        "periodo_id"=>$periodo_id,
                        "asignatura_id"=>$asignatura_id,
                        "grupo_id"=>$grupo_id
                    ))->getSingleScalarResult(); 
        return $nro_horarios_aulas;
        
        
        
    }
    public function getNroNotasTotalAsignatura($asignatura_id,$grupo_id,$periodo_id) {
        $em=  $this->getEntityManager();
        $query="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.alumno a JOIN a_d.asignatura asg  JOIN a_d.dimension d";
        $query.=" WHERE";
        $query.=" (";
        $query.=" d.padre=:periodo_id";
        $query.=" AND asg.id=:asignatura_id";
        $query.=" AND d.tipo=4 ";        
        $query.=" AND a.id IN ( ";
        $query.=" SELECT al FROM NetpublicCoreBundle:MatriculaAlumno ma JOIN ma.alumno al JOIN ma.grupo g";
        $query.=" WHERE ";
        $query.=" (";
        $query.=" ma.grupo=:grupo_id";
        $query.=" )))"; 
        
        $nro_horarios_aulas=$em->createQuery($query)                
                     ->setParameters(array(
                        "periodo_id"=>$periodo_id,
                        "asignatura_id"=>$asignatura_id,
                        "grupo_id"=>$grupo_id
                    ))->getSingleScalarResult(); 
       return $nro_horarios_aulas;

    }
    public function getPorcentajeProfesor($profesor_id,$periodo_id,$ano_id) {
        $em=  $this->getEntityManager();
        $cargas=$em->getRepository("NetpublicCoreBundle:CargaAcademica")->findBy(array(
            'profesor'=>$profesor_id,
            "ano_escolar"=>$ano_id
        ));
        $total_nota=0;
        $total_nota_ingresados=0;
        foreach ($cargas as $ca) {
            $total_nota+=$this->getNroNotasTotalAsignatura($ca->getAsignatura()->getId(),$ca->getGrupo()->getId(),$periodo_id);
            $total_nota_ingresados+=$this->getNroNotasIngresadasAsignatura($ca->getAsignatura()->getId(),$ca->getGrupo()->getId(),$periodo_id);
        }
        $porcentaje=0;
        if ($total_nota>0)
            $porcentaje=number_format(($total_nota_ingresados/$total_nota)*100,0);
        return $porcentaje;
    }
    public function getNroNotasTotalIngresadas($profesor_id,$periodo_id) {
        $em=  $this->getEntityManager();
        $sql="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d  ";
        //$sql.="JOIN a_d.alumno a ";
        $sql.="JOIN a_d.dimension d ";
        $sql.="WHERE (";
        $sql.=" d.tipo=4 ";        
        $sql.=" AND d.profesor=:profesor_id ";
        $sql.=" AND a_d.es_ingresadad=true";                     
        $sql.=" AND d.padre=:id_periodo";
        $sql.=" )";                
         
        $nro_horarios_aulas=$em->createQuery($sql)                         
                              ->setParameters(array(             
                                         //"asignatura_id"=>$asignatura_id,
                                         "profesor_id" =>$profesor_id,
                                         "id_periodo" => $periodo_id))
                                  ->getSingleScalarResult();
            
        return $nro_horarios_aulas;
    }
    public function getNroNotasModificadasProfesor($profesor_id,$periodo_id,$fecha_ultima_publicacion) {
        $em=  $this->getEntityManager();
        $sql="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d  ";
        //$sql.="JOIN a_d.alumno a ";
        $sql.="JOIN a_d.dimension d ";
        $sql.="WHERE (";
        $sql.=" d.tipo=4 ";
        $sql.=" AND d.profesor=:profesor_id ";        
        $sql.=" and d.padre=:id_periodo";
        $sql.=" and a_d.fecha_ultimo_cambio>:fecha";        
        $sql.=" and a_d.es_modificada=true)";                
         
        $nro_horarios_aulas=$em->createQuery($sql)                         
                              ->setParameters(array(             
                                         //"asignatura_id"=>$asignatura_id,
                                         "profesor_id" =>$profesor_id,
                                         "fecha"=>$fecha_ultima_publicacion,
                                         "id_periodo" => $periodo_id))
                                  ->getSingleScalarResult();
            
        return $nro_horarios_aulas;
    }
    public function getNroNotasIngresadasSede($sede_id,$periodo_id) {
        $em=  $this->getEntityManager();
        $sql="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d  ";
        $sql.="JOIN a_d.alumno a ";
        $sql.="JOIN a_d.dimension d ";
        $sql.="WHERE (";
        $sql.=" d.tipo=4 ";
        $sql.=" AND a.sede=:sede_id ";        
        $sql.=" and d.padre=:id_periodo";
        $sql.=" AND a_d.es_ingresadad=true)";                   
         
        $nro_horarios_aulas=$em->createQuery($sql)                         
                              ->setParameters(array(             
                                         //"asignatura_id"=>$asignatura_id,
                                         "sede_id" =>$sede_id,
                                         //"fecha"=>$fecha_ultima_publicacion,
                                         "id_periodo" => $periodo_id))
                                  ->getSingleScalarResult();
            
        return $nro_horarios_aulas;
    }
    public function getNroNotasSede($sede_id,$periodo_id) {
        $em=  $this->getEntityManager();
        $sql="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d  ";
        $sql.="JOIN a_d.alumno a ";
        $sql.="JOIN a_d.dimension d ";
        $sql.="WHERE (";
        $sql.=" d.tipo=4 ";
        $sql.=" AND a.sede=:sede_id ";        
        $sql.=" and d.padre=:id_periodo)";
        //$sql.=" AND a_d.es_ingresadad=true)";                   
         
        $nro_horarios_aulas=$em->createQuery($sql)                         
                              ->setParameters(array(             
                                         //"asignatura_id"=>$asignatura_id,
                                         "sede_id" =>$sede_id,
                                         //"fecha"=>$fecha_ultima_publicacion,
                                         "id_periodo" => $periodo_id))
                                  ->getSingleScalarResult();
            
        return $nro_horarios_aulas;
    }
    public function getNroNotasModificadasGrupo($grupo_id,$periodo_id) {
        $em=  $this->getEntityManager();
         $carga_academica=$em->getRepository("NetpublicCoreBundle:CargaAcademica")
                ->findBy(array(
                    'grupo'=>$grupo_id,
                    'tiene_profesor'=>1
                    
                ));
        $data=0;
        foreach ($carga_academica as $ca) {
            $publicacion_periodo=  $em
                                  ->getRepository("NetpublicCoreBundle:PublicacionPeriodosProfesores")
                                  ->findOneBy(array(
                                      'profesor'=>$ca->getProfesor()->getId(),
                                      'periodo_academico'=>$periodo_id
                                  ));
            $fecha=$publicacion_periodo->getFechaUltimoPublicacion(); 
        $nro_modificaciones=$em->getRepository("NetpublicCoreBundle:Profesor")
                                ->getNroNotasModificadasAsignatura(
                                        $ca->getAsignatura()->getId(),
                                        $ca->getGrupo()->getId(),
                                        $periodo_id,
                                        $fecha);
       
        $data=$data+$nro_modificaciones;
       }
       
       return $data; 
    }
   
}