<?php

namespace Netpublic\CoreBundle\Repository;
use Netpublic\CoreBundle\Entity\HorarioClase;
use Netpublic\CoreBundle\Entity\CargaAcademica;
use Doctrine\ORM\EntityRepository;
use Netpublic\CoreBundle\Repository\HorarioClaseHelperRepository;

/**
 * HorarioClaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HorarioClaseRepository extends HorarioClaseHelperRepository{
    public function generarHorariosClase(            
            $nro_clase_dia,
            $dias_festivos                   
            
            ) {    
        $em=  $this->getEntityManager();

        $profesores=  $this->getEntityManager()
                           ->getRepository("NetpublicCoreBundle:Profesor")
                           ->findBy(array(
                               "tipo"=>2
                           ));
       $grupos=  $this->getEntityManager()
                      ->getRepository("NetpublicCoreBundle:Grupo")
                      ->findAll()
               ;
        $this->borrarGenerarFichas($nro_clase_dia,$dias_festivos,$profesores);         
        //Establecemos consiciones para todo el colegio
        $this->setCondicionesColegio($grupos);
        //Establecemos condiconeProfesores
        $this->setCondicionesProfesor($profesores);
        //Establecesmos tiempos libres de Grupo
        $this->setCondicionesGrupo($grupos);
        $em->flush();
        //Obtenesmos contratos a trabajar                
        $dql="SELECT ca,p,a,g FROM NetpublicCoreBundle:CargaAcademica ca";
        $dql.=" JOIN ca.profesor p JOIN ca.asignatura a JOIN ca.grupo g";
        //$dql.=" WHERE g.id=1";
        $cargas_academicas=  $this->getEntityManager()
                              ->createQuery($dql)
                              ->getResult();
        
        foreach ($cargas_academicas as $ca) {                  
            $asignatura_id=$ca->getAsignatura()->getId();
            $grupo_id=$ca->getGrupo()->getId();
            $contrado_id=$ca->getId();
            if($this->hayCondicionesAsignatura($asignatura_id))                
                $this->setCondicionesAsignatura ($asignatura_id,$grupo_id);
            if($this->hayCondicionesCargaAcademica($contrado_id)){
                $this->setCondicionesContrato($contrado_id, $grupo_id);
            }    
            if($ca->getProfesor()!=NULL){
                  $frecuencia_semana=$ca->getAsignatura()->getFrucuenciaSemana();
                  $ficha=$this->findFichaLibre($ca);         
                  for ($index = 1; $index < $frecuencia_semana; $index++) {
                        $ficha=$this->findFichaLibre($ca);                                                                                                 
                  }
                  if($this->hayCondicionesAsignatura($asignatura_id)){                
                    $dql="UPDATE NetpublicCoreBundle:HorarioGrupo hg set hg.tipo=0";
                    $dql.=" WHERE hg.tipo=5 and hg.grupo=:grupo";
                    $em->createQuery($dql)
                         ->setParameter('grupo',$grupo_id)     
                            ->execute()
                    ;            
                  }
                  if($this->hayCondicionesCargaAcademica($contrado_id)){                
                    $dql="UPDATE NetpublicCoreBundle:HorarioGrupo hg set hg.tipo=0";
                    $dql.=" WHERE hg.tipo=6 and hg.grupo=:grupo";
                    $em->createQuery($dql)
                         ->setParameter('grupo',$grupo_id)     
                            ->execute()
                    ;            
                  }

            }
            else{
               ;//Buscamos profesor, sin contrato
            }
        }
        
    }
    
    public function generarHorarioClaseCargaAcademica($cargas_academicas) {
                
        foreach ($cargas_academicas as $ca) {                  
            $asignatura_id=$ca->getAsignatura()->getId();
            $grupo_id=$ca->getGrupo()->getId();
            $contrado_id=$ca->getId();
            if($this->hayCondicionesAsignatura($asignatura_id))                
                $this->setCondicionesAsignatura ($asignatura_id,$grupo_id);
            if($this->hayCondicionesCargaAcademica($contrado_id)){
                $this->setCondicionesContrato($contrado_id, $grupo_id);
            }    
            if($ca->getProfesor()!=NULL){
                  $frecuencia_semana=$ca->getAsignatura()->getFrucuenciaSemana();
                  $ficha=$this->findFichaLibre($ca);         
                  for ($index = 1; $index < $frecuencia_semana; $index++) {
                        $ficha=$this->findFichaLibre($ca);                                                                                                 
                  }
                  if($this->hayCondicionesAsignatura($asignatura_id)){                
                    $dql="UPDATE NetpublicCoreBundle:HorarioGrupo hg set hg.tipo=0";
                    $dql.=" WHERE hg.tipo=5 and hg.grupo=:grupo";
                    $em->createQuery($dql)
                         ->setParameter('grupo',$grupo_id)     
                            ->execute()
                    ;            
                  }
                  if($this->hayCondicionesCargaAcademica($contrado_id)){                
                    $dql="UPDATE NetpublicCoreBundle:HorarioGrupo hg set hg.tipo=0";
                    $dql.=" WHERE hg.tipo=6 and hg.grupo=:grupo";
                    $em->createQuery($dql)
                         ->setParameter('grupo',$grupo_id)     
                            ->execute()
                    ;            
                  }

            }
            else{
               ;//Buscamos profesor, sin contrato
            }
        }
    }
    public function preconfiguracionGeneracionPorPartes($nro_clase_dia,$dias_festivos) {
        $em=  $this->getEntityManager();

        $profesores=  $this->getEntityManager()
                           ->getRepository("NetpublicCoreBundle:Profesor")
                           ->findBy(array(
                               "tipo"=>2
                           ));
       $grupos=  $this->getEntityManager()
                      ->getRepository("NetpublicCoreBundle:Grupo")
                      ->findAll()
               ;
        $this->borrarGenerarFichas($nro_clase_dia,$dias_festivos,$profesores);         
        //Establecemos consiciones para todo el colegio
        $this->setCondicionesColegio($grupos);
        //Establecemos condiconeProfesores
        $this->setCondicionesProfesor($profesores);
        //Establecesmos tiempos libres de Grupo
        $this->setCondicionesGrupo($grupos);
        $em->flush();

    }
    public function borrarPartesHorarioClase($cargas_academcias) {
        $em=  $this->getEntityManager();
        foreach ($cargas_academcias as $ca) {
            
        $em->createQuery(
                "DELETE NetpublicCoreBundle:HorarioClase hc
                 WHERE hc.carga_academica=:ca_id   
                    ")
                ->setParameter('ca_id',$ca->getId())
                ->execute(); 
        $em->createQuery("DELETE NetpublicCoreBundle:HorarioGrupo hg
                  WHERE hg.carga_academica=:ca_id 
                ")                
                ->setParameter('ca_id', $ca->getId())
                ->execute(); 
        
        }
    }
}
