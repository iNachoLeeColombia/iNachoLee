<?php

namespace Netpublic\CoreBundle\Repository;
use Netpublic\CoreBundle\Entity\Dimension;
use Doctrine\ORM\EntityRepository;

/**
 * DimensionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DimensionRepository extends EntityRepository
{
    public function append($item,$comp,$carga) {
        $em=  $this->getEntityManager();
        $grupo=$carga->getGrupo();
        $alumnos=$em->getRepository("NetpublicCoreBundle:Alumno")->listarAlumnosGrupo($grupo->getId());
        foreach ($alumnos as $alumno) {
            $em->getRepository("NetpublicCoreBundle:Alumno")->appendItems($item,$carga,$alumno);
        }
    }
    public function copiarNotas($compo_origen,$compo_destino,$alumno) {
        $em=  $this->getEntityManager();
        $notas_modificar=$em->getRepository("NetpublicCoreBundle:AlumnoDimension")->findBy(array(
            'dimension'=>$compo_origen,
            'alumno'=>$alumno->getId()
        ));
        foreach ($notas_modificar as $mi_nota) {
            $nota=new \Netpublic\CoreBundle\Entity\AlumnoDimension();
            $nota->setAlumno($alumno);
            $nota->setAsignatura($compo_destino->getAsignatura());
            $nota->setDimension($compo_destino);
            $nota->setNota($mi_nota->getNota());
            $em->persist($nota);
            $em->remove($mi_nota);
        }
    }
    public function getComponentesItems($ca){
            $em=  $this->getEntityManager();
            $query="SELECT d FROM NetpublicCoreBundle:Dimension d ";
            $query.=" WHERE (d.padregc=:padre_id";
            $query.=" AND d.tipo=4)";
            $query.=" ORDER BY d.id DESC";
            $entities=$em->createQuery($query)                
                         ->setParameters(array(
                                         "padre_id"=>$ca->getPadreEvaluacion()->getId()
                                      ))->getResult(); 


            return $entities;  
    
}
    public function getComponenteNombre($nombre,$profesor_id,Dimension $periodo, $asignatura_id,$grupo_id){
            $em=  $this->getEntityManager();
            $query="SELECT d FROM NetpublicCoreBundle:Dimension d JOIN d.grupo g ";
            $query.=" WHERE (d.padre=:periodo_id";
            $query.=" AND d.asignatura=:asignatura_id";
            $query.=" AND d.profesor=:profesor_id";
            $query.=" AND g=:grupo_id ";
            $query.=" AND d !=d.padre";
            $query.=" AND d.nombre=:nombre";
            
            $query.=" AND d.tipo=4)";
            $query.=" ORDER BY d.id DESC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "profesor_id"=>$profesor_id,
                                         "nombre"=>$nombre,
                                         "grupo_id"=>$grupo_id
                                      ))->getOneOrNullResult(); 


            return $entities;  
    
}


public function getGrupo($id_grupo){
     return $this->getEntityManager()
                ->createQuery("SELECT a.nombre,a.id FROM NetpublicCoreBundle:Dimension a JOIN a.grupo g WHERE g.id=:id")                
                ->setParameter('id', $id_grupo); 
}
public function getNroDimensiones($id_grupo){
    return $this->getEntityManager()
                ->createQuery("SELECT count(a) as nro_dim FROM NetpublicCoreBundle:Dimension a JOIN a.grupo g WHERE g.id=:id")                
                ->setParameter('id', $id_grupo); 
}
public function getItemsSuperiores(){
     $hijos_dimension=$this->findBy(
                        array("es_item_principal"=>1)
                        );   
     return $hijos_dimension;    
}
public function findAnoEscolarActivo() {
    return $this->findOneBy(array(
        'es_ano_escolar'=>1,
        'tipo'=>0
    ));
    
}
public function findAnoEscolares() {
    return $this->findBy(array(
        'tipo'=>0
    ));
    
}

public function findPeriodoEscolarActivo() {
    return $this->findOneBy(array(
        'es_ano_escolar'=>1,
        'tipo'=>1
    ));
    
}
public function findPeriodoEscolar($padre_id) {
    
    return $this->findOneBy(array(
        'padre'=>$padre_id,
        'tipo'=>1
    )); 
    
}

public function findPeriodosEscolar($padre) {
    if($padre!=null)
    return $this->findBy(array(
        'padre'=>$padre->getId(),
        'tipo'=>1
    ));
    else
        return array();
    
}
public function findPeriodosHijosAnoActivo(){
    $entities=array();
    $padre=  $this->findAnoEscolarActivo();
    $peridos_academicos=  $this->findPeriodosEscolar($padre);
    $entities[]=$peridos_academicos;
    
    foreach ($peridos_academicos as $p_a) {
        $entities[]=$this->getEntityManager()
                ->createQuery("SELECT a FROM NetpublicCoreBundle:Dimension a WHERE a.padre=:periodo_academica and a.tipo=6 ")                
                ->setParameter('periodo_academica', $p_a->getId())
                ->getResult(); 
        
    }
    return $entities;
    
}

public function findComponentesItems($periodo,$carga){
    $entities_retornar=array();
    $sql="SELECT a FROM NetpublicCoreBundle:Dimension a ";
    $sql.="JOIN a.grupo g ";
    $sql.="WHERE a.tipo=4 and a.padre=:periodo_academica ";
    $sql.="and a.asignatura=:asignatura ";
    $sql.="AND g.id=:grupo_id";
        $entities=$this->getEntityManager()
                ->createQuery($sql)                
                ->setParameters(array(
                    'periodo_academica'=>$periodo->getId(),
                    'asignatura'=>$carga->getAsignatura()->getId(),
                    'grupo_id'=>$carga->getGrupo()->getId()
                    ))
                ->getResult(); 
        $index=0;
        foreach ($entities as $comp) {
                 $entities_retornar[$index]=$comp;
                 $index++;
                $items=$this->getEntityManager()
                    ->createQuery($sql)                
                    ->setParameters(array(
                    'periodo_academica'=>$comp->getId(),
                    'asignatura'=>$carga->getAsignatura()->getId(),
                    'grupo_id'=>$carga->getGrupo()->getId()    
                    ))
                ->getResult(); 
                foreach ($items as $item) {                     
                    $entities_retornar[$index]=$item;
                    $index++;
                }
                
                
            
        }
        return $entities_retornar;
    
}
public function findComponentes($periodo,$profesor,$asignatura,$grupo_id){
    $sql="SELECT a FROM NetpublicCoreBundle:Dimension a WHERE";
    $sql.="( a.tipo=4 and a.padre=:periodo_academica";
    $sql.=" and a.profesor=:profesor and a.asignatura=:asignatura ";
    $sql.=") ";
    $sql.=" ORDER BY a.id DESC";
                    
    $res=array();
    $entities=$this->getEntityManager()
                ->createQuery($sql)                
                ->setParameters(array(
                    'periodo_academica'=>$periodo,
                    'profesor'=>$profesor,
                    'asignatura'=>$asignatura
                    ))
                ->getResult();
        foreach ($entities as $e) {
            foreach ($e->getGrupo() as $g) {
                if($g->getId()==$grupo_id)
                    $res[]=$e;
             }
        }
    //Agragamos peridos Y fallas    
    $sql="SELECT a FROM NetpublicCoreBundle:Dimension a WHERE";
    $sql.="( a.tipo=3 and a.padre=:periodo_academica";
    $sql.=") OR (a.id=:periodo_academica)";
    $sql.=" ORDER BY a.tipo DESC";
                    
    
    $entities_finales=$this->getEntityManager()
                ->createQuery($sql)                
                ->setParameters(array(
                    'periodo_academica'=>$periodo,
                    ))
                ->getResult();
        foreach ($entities_finales as $e) {
            $res[]=$e;
        }
        return $res;
    
}
public function getNroHijos($periodo,$profesor,$asignatura){
    $sql="SELECT count(a) FROM NetpublicCoreBundle:Dimension a";
    $sql.=" JOIN a.grupo g";
    $sql.=" WHERE ";
    $sql.="(a.padre=:periodo_academica";
    $sql.=" and  a.profesor=:profesor and a.asignatura=:asignatura ";
    
    $sql.=") ";
    
                    
    $entities=$this->getEntityManager()
                ->createQuery($sql)                
                ->setParameters(array(
                    'periodo_academica'=>$periodo,
                    'profesor'=>$profesor,
                    'asignatura'=>$asignatura
                    ))
                ->getSingleScalarResult();
        return $entities;
    
}

public function getHijos($periodo,$profesor,$asignatura,$grupo_id){
    $sql="SELECT a FROM NetpublicCoreBundle:Dimension a";
    $sql.=" JOIN a.grupo g";
    $sql.=" WHERE ";
    $sql.="(a.padre=:periodo_academica";
    $sql.=" and  a.profesor=:profesor and a.asignatura=:asignatura ";
    $sql.=" AND g.id=:grupo_id";
    $sql.=") ";
    $sql.=" ORDER BY a.id DESC";
                    
    $entities=$this->getEntityManager()
                ->createQuery($sql)                
                ->setParameters(array(
                    'periodo_academica'=>$periodo,
                    'profesor'=>$profesor,
                    'asignatura'=>$asignatura,
                    'grupo_id'=>$grupo_id
            
                    ))
                ->getResult();
        return $entities;
    
}

public function adicionarComponente($grupo,$asignatura,$padre,$nombre,$ponderado){
                $em=  $this->getEntityManager();
                $entity=new \Netpublic\CoreBundle\Entity\Dimension();
                $entity->setNombre($nombre);
                $entity->setPonderado($ponderado);
                //Establecemos nivel para mostrar
                $valor_defecto=-1;
                //$entity->setProfesor($dueno);                
                $entity->setPeriodoacademico($padre);
                $entity->setPadre($padre);
                $entity->setAsignatura($asignatura);
                $entity->addGrupo($grupo);
                $entity->setTipo(4);
                $alumnos_grupo=$em->getRepository("NetpublicCoreBundle:Alumno")
                                    ->findBy(array('grupo'=>$grupo->getId()));
               //Asignamos registros para guardar nota de la la tera-actividad
               foreach ($alumnos_grupo as $alumno_grupo) {                   
                $nota=new \Netpublic\CoreBundle\Entity\AlumnoDimension();
                $nota->setAlumno($alumno_grupo);
                $nota->setAsignatura($entity->getAsignatura());
                $nota->setDimension($entity);
                $nota->setNota($valor_defecto);
                $nota->setNotaBuffered($valor_defecto);
                $em->persist($nota);
                echo "hola mama";
               }
               $em->persist($entity);
               
               return $entity;
}
public function verificarEstaPadre($id){
     $query="SELECT count(d) FROM NetpublicCoreBundle:Dimension d";
     $query.=" WHERE (d.id=:id";
     $nro=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "id"=>$id,                                   
                                      ))->getSingleScalarResult();
    return $nro;        
}
public function adicinarComponentesObligatorios($grupo_id,$asignatura,$periodos_academicos){
    $em=  $this->getEntityManager();
    $alumnos=$em->getRepository("NetpublicCoreBundle:Alumno")->findBy(array(
        "grupo"=>$grupo_id
    ));
    foreach ($alumnos as $alumno) {
        $em->getRepository("NetpublicCoreBundle:Alumno")
       ->agregarDimensionnObligatorias(
            $alumno,
            $alumno->getGrupo(),
            $asignatura,
            $periodos_academicos,
            0
            );
    }
    
}
public function deleteItem($id_item){
             $em=  $this->getEntityManager();
             $query="DELETE NetpublicCoreBundle:AlumnoDimension a_d";
             $query.=" WHERE (";            
             $query.=" a_d.dimension=:dimension";
             $query.=" )";
             $em->createQuery($query)                
                                 ->setParameters(array(
                                         "dimension"=>$id_item,                                         
                                      ))->execute();
             
            $query="DELETE NetpublicCoreBundle:Dimension a_d";
            $query.=" WHERE (";            
            $query.=" a_d.id=:dimension";
            $query.=" )";
            $em->createQuery($query)                
                                 ->setParameters(array(
                                         "dimension"=>$id_item,                                         
                                      ))->execute();
             

}
function deleteComponente($componente_id) {
            $em=  $this->getEntityManager();
            $componente=$em->getRepository("NetpublicCoreBundle:Dimension")->find($componente_id);
        if($componente->getTipo()==4){
            foreach ($componente->getGrupo() as $grupo) {
                $grupo_id=$grupo->getId();
            }
            $a_ds=$componente->getPorcentajea();
            foreach ($a_ds as $a_) {
                $em->remove($a_);
            }
            $items=  $em->getRepository("NetpublicCoreBundle:Dimension")
                        ->getComponentesItems($componente,$componente->getAsignatura(),$grupo_id);
                        
           foreach ($items as $item) {
                $a_ds=$item->getPorcentajea();
                foreach ($a_ds as $a_) {
                    $em->remove($a_);
                }
               $this->deleteItem($item->getId());
            }            
            $em->flush();
            $query="DELETE NetpublicCoreBundle:AlumnoDimension a_d";
            $query.=" WHERE (";            
            $query.=" a_d.dimension=:dimension";
            $query.=" )";
            $em->createQuery($query)                
                                 ->setParameters(array(
                                         "dimension"=>$componente_id,                                         
                                      ))->execute();
             
            $query="DELETE NetpublicCoreBundle:Dimension a_d";
            $query.=" WHERE (";            
            $query.=" a_d.id=:dimension";
            $query.=" )";
            $em->createQuery($query)                
                                 ->setParameters(array(
                                         "dimension"=>$componente_id,                                         
                                      ))->execute();

       }
}
public function findDimensiones($alumno_id,$componete_periodo,$asignatura){ 
        $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
        $query.=" WHERE (";
        $query.=" (d.padre=:dimension_id";
        $query.=" AND a_d.asignatura=:asignatura_id";        
        $query.=" AND d.tipo=4";        
        $query.=" AND a_d.alumno=:alumno_id";        
        $query.=" )";
        
        $query.=" )";
        $query.=" ORDER BY a_d.id DESC";        
        $dimensiones=array();
        $nro_asg_perdidas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "dimension_id"=>$componete_periodo,                                                                               
                                            "asignatura_id"=>$asignatura,
                                            "alumno_id"=>$alumno_id                                            
                                    ))->getResult();
                    foreach ($nro_asg_perdidas as $d) {
                        $dimensiones[]=$d->getDimension();
                        
                    }
                    
      return $dimensiones; 
}
    public function getModeloComp($padre_id){
            $em=  $this->getEntityManager();
            $query="SELECT d FROM NetpublicCoreBundle:Dimension d ";
            $query.=" WHERE (d.padregc=:padre_id";
            $query.=" AND (d.tipogc=9 OR d.tipogc=8))";
            $query.=" ORDER BY d.id DESC";
            $entities=$em->createQuery($query)                
                         ->setParameters(array(
                                         "padre_id"=>$padre_id
                               ))->getResult(); 


            return $entities;  
    
}

}