<?php

namespace Netpublic\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Netpublic\CoreBundle\Entity\Grupo;
use Netpublic\CoreBundle\Entity\Alumno;
use Netpublic\CoreBundle\Entity\Asignatura;
use Netpublic\CoreBundle\Entity\AlumnoDimension;
use Netpublic\CoreBundle\Entity\Dimension;
use Netpublic\CoreBundle\Entity\MatriculaAlumno;
use Netpublic\CoreBundle\Entity\Usuario;
use Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder;
use Netpublic\CoreBundle\Entity\AlumnoDesempeno;
/**
 * AlumnoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class AlumnoRepository extends EntityRepository
{
   public function getNotaNombre($alumno,$nombre_dimension,$asignatura,$periodo){ 
        $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN d.padre p";
        $query.=" WHERE (p.padre=:periodo";
        $query.=" AND d.nombre=:nombre_dimension";
        $query.=" AND a_d.asignatura=:asignatura_id";        
        $query.=" AND d.tipo=4";        
        $query.=" AND a_d.alumno=:alumno";        
        $query.=" )";                          
        $nro_asg_perdidas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "nombre_dimension"=>$nombre_dimension,                                                                               
                                            "asignatura_id"=>$asignatura,
                                            "alumno"=>$alumno,
                                            "periodo"=>$periodo
                                            
                                    ))->getResult();
                             
                             
        
        return $nro_asg_perdidas;        
    }    


    public function listarAlumnosGrupo($id_grupo){
        return $this->getEntityManager()
                ->createQuery("SELECT a FROM NetpublicCoreBundle:Alumno a WHERE a.grupo=:id")                
                ->setParameter('id', $id_grupo);                
    } 
    
    public function getPromedioAlumnoGrupo($alumno,$periodo_escolar_activo){ 
        $query="SELECT n_a FROM NetpublicCoreBundle:NivelAcademico n_a";
        $query.=" WHERE (n_a.periodo_actual=:periodo_id";
        $query.=" AND n_a.alumno=:alumno";        
        $query.=" AND n_a.tipo=8)";                          
        $promedio=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "periodo_id"=>$periodo_escolar_activo,                                   
                                            "alumno"=>$alumno->getId()
                                            
                                    ))->getResult();
       //echo $alumno;
       $resultado=array("promedio_estudiante"=>0,
                            "puesto"=>0
                            ); 
       foreach ($promedio as $p) {
                        $resultado=array(
                            "promedio_estudiante"=>$p->getNota(),
                            "puesto"=>$p->getPuesto()
                            );
                    }            
        return $resultado;        
    }    

   public function getAlumnosMejoresPuestos($grupo,$periodo){         
        $query="SELECT a,n FROM NetpublicCoreBundle:NivelAcademico n JOIN n.alumno a";
        $query.=" WHERE (";
        $query.=" n.tipo=2";
        $query.=" AND n.periodo_actual=:periodo";
        $query.=" AND a.grupo=:grupo";                
        $query.=" )";                         
        $query.=" ORDER BY n.nota DESC";        
        $nro=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(                                                                               
                                       //     "grado"=>$grado,                      
                                            "grupo"=>$grupo,                                          
                                            "periodo"=>$periodo
                                    ))
                ->setMaxResults(5)
                ->getResult();
                             
                             
                            
        return $nro;        
    }

    public function getNroAlumnosAproboReproboRetiro($sede,$grado,$grupo,$tipo){         
        $query="SELECT count(a) FROM NetpublicCoreBundle:Alumno a";
        $query.=" WHERE (a.sede=:sede";
        //$query.=" AND a.grado=:grado";
        //$query.=" AND a.grupo=:grupo";
        if($tipo!='*'){//Aprobo{
            $query.=" AND a.situacion_academica_ano_anterior=:tipo";
        }
        $query.=" )";                          
        $nro=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "sede"=>$sede,                                   
                                       //     "grado"=>$grado,                      
                                        //    "grupo"=>$grupo,
                                            "tipo"=>$tipo
                                    ))->getSingleScalarResult();
                             
                             
                            
        return $nro+0;        
    }
    public function getNroAlumnosHabilitaron($sede,$grado,$grupo){         
        $query="SELECT count(a) FROM NetpublicCoreBundle:Alumno a";
        $query.=" WHERE (a.sede=:sede";
        //$query.=" AND a.grado=:grado";
        //$query.=" AND a.grupo=:grupo";        
        $query.=" AND a.es_habilitacion=2";        
        $query.=" )";                          
        $nro=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "sede"=>$sede,                                   
                                    //        "grado"=>$grado,                      
                                     //       "grupo"=>$grupo

                                    ))->getSingleScalarResult();
                             
                             
                            
        return $nro+0;        
    }
    
    public function getNroAsignaturasPerdidas($alumno_id,$ano_escolar_activo,$nota_minima,$sede){ 
        
        $query="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura asg JOIN a_d.alumno a";
        $query.=" WHERE (a_d.dimension=:periodo_id";
        $query.=" AND asg.es_area=0";
        $query.=" AND a_d.alumno=:alumno_id";
        if($sede!='*'){
            $query.=" AND a.sede=:sede";
        }
        $query.=" AND a_d.nota<:nota_minima";
        $query.=" AND d.tipo=1)";                          
        $nro_asg_perdidas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "periodo_id"=>$ano_escolar_activo,                                   
                                            "alumno_id"=>$alumno_id,                      
                                            "nota_minima"=>$nota_minima
         ));
       if($sede!='*'){
            $nro_asg_perdidas->setParameter("sede", $sede);
        }
        $nro_asg_perdidas=$nro_asg_perdidas->getSingleScalarResult();                                                                                                                                               
        return $nro_asg_perdidas+0;        
    }
    public function getNroAlumnosGrupo($grupo_id){ 
        
        $query="SELECT count(a) FROM NetpublicCoreBundle:Alumno a";
        $query.=" WHERE (a.grupo=:grupo_id";
        $query.=" )";                          
        $nro_alumnos=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "grupo_id"=>$grupo_id));
        $nro_alumnos=$nro_alumnos->getSingleScalarResult();                                                                                                                                               
        return $nro_alumnos;        
    }
    
    public function getPromedioGrupo($grupo_id,$periodo_escolar_activo){ 
        $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura asg JOIN a_d.alumno a";
        $query.=" WHERE (d.padre=:periodo_id";
        $query.=" AND asg.es_area=1";
        $query.=" AND a.grupo=:grupo";        
        $query.=" AND d.tipo=2)";                          
        $nro_asg_perdidas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "periodo_id"=>$periodo_escolar_activo,                                   
                                            "grupo"=>$grupo_id                     
                                            
                                    ))->getResult();
                             
                             
        $numero_alumnos=0;                    
        $promedio_total=0.0;
        $promedio_grupo=0;
        foreach ($nro_asg_perdidas as $nota) {            
            $promedio_total=$nota->getNota()+$promedio_total;
            $numero_alumnos++;
                        
        }      
        if($numero_alumnos>0)
        $promedio_grupo=$promedio_total/($numero_alumnos);
        return $promedio_grupo+0;        
    }    
    public function getAreasPerdidas($alumno_id,$periodo_escolares,$nota_minima,$areas){ 
        $areas_perdidas=0;
        $areas_ganadas=0; 
          foreach ($areas as $area) {                
               //Calculamos Areas
                   
                   $promedio_area=0;
                   $numeros_periodos_area=0;
                   $promedios_areas_temp=0;                   
                   foreach ($periodo_escolares as $p_e) {
                             $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
                             $query.=" WHERE (d.padre=:periodo_id";
                             $query.=" AND a_d.asignatura=:asignatura_id";
                             $query.=" AND a_d.alumno=:alumno_id";
                             $query.=" AND d.tipo=2)";                          
                             $notas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "periodo_id"=>$p_e->getId(),
                                            "asignatura_id"=>$area->getId(),
                                            "alumno_id"=>$alumno_id                                     
                                    ))->getResult();     //                
                             
                            foreach ($notas as $nota_) {      
                                   $nota_tem=$nota_->getNota();                                             
                                   $promedio_area+=$nota_tem;
                                   if($nota_tem>0)
                                    $numeros_periodos_area++;  
                                 
                            }
                   }
                   //}
                   if($numeros_periodos_area>0)
                        $promedio_area=$promedio_area/$numeros_periodos_area;
                   $promedios_areas_temp=  $promedio_area;
                   //Acumulasmo areas perdidas y aras ganadas
                   if($promedios_areas_temp>=$nota_minima){
                       $areas_ganadas++; 
                   }
                   if($promedios_areas_temp<$nota_minima){
                       $areas_perdidas++;                       
                       
                   }                          
       }                      
       return $areas_perdidas;            
    }
    public function esPerdioAsignaturaArea(Asignatura $asignatura,  Alumno $alumno,$periodo_escolares,$nota_minima){
                   $promedio_notas=0;
                   $numeros_periodos_area_asg=0;                   
                   foreach ($periodo_escolares as $p_e) {
                             $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
                             if($asignatura->getEsArea())
                                $query.=" WHERE (d.padre=:periodo_id";
                             else
                                $query.=" WHERE (d.id=:periodo_id";
                             $query.=" AND a_d.asignatura=:asignatura_id";
                             $query.=" AND a_d.alumno=:alumno_id";
                             if($asignatura->getEsArea())
                                $query.=" AND d.tipo=2)";                          
                             else
                                $query.=" AND d.tipo=1)";                          
                             $notas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "periodo_id"=>$p_e->getId(),
                                            "asignatura_id"=>$asignatura->getId(),
                                            "alumno_id"=>$alumno->getId()
                                        
                                    ))->getResult();     //                
                            foreach ($notas as $nota_) {      
                                   $nota_tem=$nota_->getNota();                                            
                                   $promedio_notas+=$nota_tem;                                                                   
                            }
                            $numeros_periodos_area_asg++;
                   }
                   $p=$promedio_notas/$numeros_periodos_area_asg;
                   if($p<=$nota_minima){
                       $perdio=1;
                   }
                   else{
                       $perdio=0;
                   }
                   return $perdio;

        
    }
    //Matricular alumno
    public function matricularAlumnoNuevo(
            Alumno $alumno,
            Grupo $grupo_matricular,
            $asignaturas_areas,
            $peridos_academicos,
            $nota_defecto
            ){
        if($nota_defecto==null)
            $nota_defecto=-1;
        $em=  $this->getEntityManager();
          $alumno->setGrupo($grupo_matricular);
          $alumno->setEsNuevo(TRUE);
          //Establecemos para notas
          foreach ($asignaturas_areas as $asg) {
                //Creamos registroas para la areas
                if($asg->getEsArea()){
                   foreach ($peridos_academicos as $p_a) {
                       $areas_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                                        ->findBy(array(
                                                    "padre"=>$p_a->getId(),
                                                    "tipo"=>2
                        ));
                       foreach ($areas_peridos_academicos as $areas_p_a) {                                                
                              $a_d=new AlumnoDimension();
                              $a_d->setAlumno($alumno);
                              $a_d->setAsignatura($asg);                    
                              $a_d->setDimension($areas_p_a);                                        
                              $a_d->setNota($nota_defecto);
                              $a_d->setNotaBuffered(-1);
                              $em->persist($a_d);   
                       }
                   }
               }
              //Registrso de asignatuatras 
              if($asg->getEsArea()==FALSE){
                       foreach ($peridos_academicos as $p_a) {
                             $a_d=new AlumnoDimension();
                             $a_d->setAlumno($alumno);
                             $a_d->setAsignatura($asg);                    
                             $a_d->setDimension($p_a);                                        
                             $a_d->setNota($nota_defecto);
                             $a_d->setNotaBuffered(-1);
                             $em->persist($a_d);
                             //ASistencia de los periodos
                             $asistencia_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                            ->findBy(array(
                                      "padre"=>$p_a->getId(),
                                      "tipo"=>3
                             ));
                            foreach ($asistencia_peridos_academicos as $a_p_a) {
                                 $a_d=new AlumnoDimension();
                                 $a_d->setAlumno($alumno);
                                 $a_d->setAsignatura($asg);                    
                                 $a_d->setDimension($a_p_a);                                        
                                 $a_d->setNota($nota_defecto);
                                 $a_d->setNotaBuffered(-1);
                                 $em->persist($a_d);      
                            }
                  //Actividades de Periodo
                            $actividades_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                          ->findBy(array(
                                              "padre"=>$p_a->getId(),
                                              "tipo"=>4,
                                              "asignatura"=>$asg->getId(),
                                              ""
                            ));
                            foreach ($actividades_peridos_academicos as $a_p_a) {
                                echo $a_p_a;
                                   foreach ($a_p_a->getGrupo() as $g) {
                                        if($g->getId()==$grupo_matricular->getId()){
                                               $a_d=new AlumnoDimension();
                                               $a_d->setAlumno($alumno);
                                               $a_d->setAsignatura($asg);                    
                                               $a_d->setDimension($a_p_a);                                        
                                               $a_d->setNota($nota_defecto);
                                               $a_d->setNotaBuffered(-1);
                                               $em->persist($a_d);      
                                        }   
                                  }
                                  //Item de cada Componetes
                                  $items=$actividades_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                          ->findBy(array(
                                              "padre"=>$a_p_a->getId(),
                                              "tipo"=>4,
                                              "asignatura"=>$asg->getId()
                                   ));                      
                                  foreach ($items as $item) {                                  
                                    foreach ($a_p_a->getGrupo() as $g) {
                                        if($g->getId()==$grupo_matricular->getId()){
                                               $a_d=new AlumnoDimension();
                                               $a_d->setAlumno($alumno);
                                               $a_d->setAsignatura($asg);                    
                                               $a_d->setDimension($item);                                        
                                               $a_d->setNota($nota_defecto);
                                               $a_d->setNotaBuffered(-1);
                                               $em->persist($a_d);      
                                        }   
                                  }
                            }
                                  
                             }
                         }
                  }
          }
    }
 public function appendItems($item,$carga,$alumno) {
     $em=  $this->getEntityManager();     
     $a_d=new AlumnoDimension();
     $a_d->setAlumno($alumno);
     $a_d->setAsignatura($carga->getAsignatura());
     $a_d->setDimension($item);
     $em->persist($a_d);     
     
 }  
 //Esta funcion esta obsoleta 
    public function asignarGrupo($alumno,$grupo_id,$periodos) {
     $em=  $this->getEntityManager();
     $grupo=$em->getRepository("NetpublicCoreBundle:Grupo")->find($grupo_id);
     $alumno2=$em->getRepository("NetpublicCoreBundle:Alumno")->find(257);
     $alumno->setGrupo($em->getRepository("NetpublicCoreBundle:Grupo")->find($grupo_id));
     $asignaturas_estdiantes=$em->getRepository("NetpublicCoreBundle:Asignatura")->findAsg($grupo->getGrado()->getId());
     $areas=$em->getRepository("NetpublicCoreBundle:Asignatura")->findBy(array(
         'grado'=>$grupo->getGrado()->getId(),
         'es_area'=>1
     ));
   foreach ($periodos as $p_a) {
       foreach ($areas as $area) {
                        $areas_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                                  ->findBy(array(
                                                    "padre"=>$p_a->getId(),
                                                    "tipo"=>2
                        ));
            foreach ($areas_peridos_academicos as $areas_p_a) {                                                
                $a_d=new AlumnoDimension();
                $a_d->setAlumno($alumno);
                $a_d->setAsignatura($area);                    
                $a_d->setDimension($areas_p_a);                                        
                $a_d->setNota(-1);
                $a_d->setNotaBuffered(-1);
                $em->persist($a_d);   
            }

           
       }                              
      foreach ($asignaturas_estdiantes as $asg) {
           $a_d=new AlumnoDimension();
           $a_d->setAlumno($alumno);
           $a_d->setAsignatura($asg);                    
           $a_d->setDimension($p_a);                                        
           $a_d->setNota(-1);
           $a_d->setNotaBuffered(-1);
           $em->persist($a_d);
           //ASistencia de los periodos
           $asistencia_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                          ->findBy(array(
                     "padre"=>$p_a->getId(),
                     "tipo"=>3
            ));
            foreach ($asistencia_peridos_academicos as $a_p_a) {
                $a_d=new AlumnoDimension();
                $a_d->setAlumno($alumno);
                $a_d->setAsignatura($asg);                    
                $a_d->setDimension($a_p_a);                                        
                $a_d->setNota();
                $a_d->setNotaBuffered(-1);
                $em->persist($a_d);      
             } 
     //Actividades de Periodo
           //$actividades_peridos_academicos=array();
           //if($asg->getProfesor()){
           /*$actividades_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                              ->findBy(array(
                                "padre"=>$p_a->getId(),
                                "tipo"=>4,
                                "asignatura"=>$asg->getId(),
                                "profesor"=>$asg->getProfesor()->getId()
                            ));*/
               
          // }
           if($alumno2){  
           $actividades_peridos_academicos=$this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")->
                                    findDimensiones($alumno2,$p_a->getId(),$asg);
                           
             foreach ($actividades_peridos_academicos as $a_p_a) {
            //      echo $a_p_a;
                       $a_d=new AlumnoDimension();
                       $a_d->setAlumno($alumno);
                       $a_d->setAsignatura($asg);                    
                       $a_d->setDimension($a_p_a);                                        
                       $a_d->setNota(-1);
                       $a_d->setNotaBuffered(-1);
                       $em->persist($a_d);      
                  //Items  
                  /*$items=$actividades_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                          ->findBy(array(
                                              "padre"=>$a_p_a->getId(),
                                              "tipo"=>4,
                                              "asignatura"=>$asg->getId(),
                                              'profesor'=>$asg->getProfesor()->getId()
                                   ));*/
                 $items=$this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")->
                                    findDimensiones($alumno2,$a_p_a->getId(),$asg);
                                             //echo "<br/>  ---";
                   
                                  foreach ($items as $item) {
            //                          echo "$item";
                                             $a_d=new AlumnoDimension();
                                               $a_d->setAlumno($alumno);
                                               $a_d->setAsignatura($asg);                    
                                               $a_d->setDimension($item);                                        
                                               $a_d->setNota(-1);
                                               $a_d->setNotaBuffered(-1);
                                               $em->persist($a_d);      
                                                                  }
                   
             }
          //echo "{$asg->getAsignatura()}<br/>"; 
            }
       }
       //$em->flush();
   }
       return 1;
 }   
    public function crearDimensionesPadreGc($padre,$ca,$alumno) {
        $em= $this->getEntityManager();
        $grupo=$ca->getGrupo();
        $asg=$ca->getAsignatura();
        $ano_escolar=$ca->getAnoEscolar();
        $periodos_academicos=$em->getRepository("NetpublicCoreBundle:Dimension")->findPeriodosEscolar($ano_escolar);
        $dimensiones=$em->getRepository("NetpublicCoreBundle:Dimension")->getModeloComp($padre->getId());
        $loop_comp=4;
        foreach ($dimensiones as $dim_p) {
            //echo "..........$dim_p -{$dim_p->getPonderado()} -{$dim_p->getTipogc()}<br/>";
            foreach ($periodos_academicos as $periodo) {
                if($dim_p->getTipogc()!=8){
                    $dim=$em->getRepository("NetpublicCoreBundle:Dimension")->findOneBy(array(
                        'padre'=>$periodo->getId(),
                        'padregc'=>$dim_p->getId(),
                        'asignatura'=>$asg->getId(),
                        'tipo'=>4,
                        'grupo'=>$grupo->getId()
                    ));
                    if($dim){
                        $mi_dim=$dim;
                        //echo "$periodo : {$asg->getId()} encontrado {$dim->getId()}<br/> ";
                    }
                    else{
                        //echo "no encontrada";
                        //echo "$periodo : {$asg->getId()}--- {$dim_p->getId()} <br/> ";
                        $mi_dim=new Dimension();
                        $mi_dim->setAsignatura($asg);
                        $mi_dim->setPadre($periodo);
                        $mi_dim->setPadregc($dim_p);
                        $mi_dim->setTipo(4);
                        $mi_dim->setGrupo($grupo);
                        $mi_dim->setNombre($dim_p->getNombre());
                        $mi_dim->setPonderado($dim_p->getPonderado());
                        $mi_dim->setOrden($periodo->getOrden()-$loop_comp);
                        
                    }
                    $a_d=new AlumnoDimension();
                        $a_d->setAlumno($alumno);
                        $a_d->setAsignatura($asg);
                        $a_d->setDimension($mi_dim);
                        $a_d->setNota(-1);                    
                        $em->persist($a_d); 
                        $em->persist($dim_p);
                        $em->persist($mi_dim);
                        $items=$em->getRepository("NetpublicCoreBundle:Dimension")->getModeloComp($dim_p->getId());
                        $loop_items=1;
                        foreach ($items as $item) {
                            //echo $item;
                            if($mi_dim){
                                $litem=$em->getRepository("NetpublicCoreBundle:Dimension")->findOneBy(array(
                                'padre'=>$mi_dim->getId(),
                                'padregc'=>$item->getId(),
                                'asignatura'=>$asg->getId(),
                                'tipo'=>4,
                                'grupo'=>$grupo->getId()
                                ));
                                if($litem){
                                    $mi_dim_i=$litem;
                                    //echo "Padre {$dim_p->getId()}--{$mi_dim->getPonderado()} {$litem->getPadre()->getId()} <br/>";
                                }
                                else{
                                    $mi_dim_i=new Dimension();
                                    $mi_dim_i->setAsignatura($asg);
                                    $mi_dim_i->setPadre($mi_dim);
                                    $mi_dim_i->setPadregc($item);
                                    $mi_dim_i->setTipo(4);
                                    $mi_dim_i->setGrupo($grupo);
                                    $mi_dim_i->setNombre($item->getNombre());
                                    $mi_dim_i->setPonderado($item->getPonderado());
                                    $mi_dim_i->setOrden($dim_p->getOrden()-$loop_items);
                                }
                                //$item->setTipo(-1);
                                $a_d=new AlumnoDimension();
                                $a_d->setAlumno($alumno);
                                $a_d->setAsignatura($asg);
                                $a_d->setDimension($mi_dim_i);
                                $a_d->setNota(-1);
                                $em->persist($a_d);
                                $em->persist($mi_dim_i);
                                $loop_items++;
                            }

                        }
                               
                }
            }
            $loop_comp++;
        }
            
     foreach ($periodos_academicos as $periodo) {
            //Parar nota final de periodo
            $a_d=new AlumnoDimension();
            $a_d->setAlumno($alumno);
            $a_d->setAsignatura($asg);
            $a_d->setDimension($periodo);                   
            $a_d->setNota(-1);                    
            $em->persist($a_d);
            $periodo->setOrden(300);
            $em->persist($periodo);
            //Areas
            $areas_periodos_academicos=$em->getRepository("NetpublicCoreBundle:Dimension")
                                              ->findOneBy(array(
                                                    "padre"=>$periodo->getId(),
                                                    "tipo"=>2
                                                ));
            $a_d=new AlumnoDimension();
            $a_d->setAlumno($alumno);
            $a_d->setAsignatura($asg->getArea());                    
            $a_d->setDimension($areas_periodos_academicos);                                        
            $a_d->setNota(-1);
            $a_d->setNotaBuffered(-1);
            $em->persist($a_d);   
            //fallas
            $falla=$em->getRepository("NetpublicCoreBundle:Dimension")->findOneBy(array(
                'tipo'=>3,
                'padre'=>$periodo->getId()
            ));
            $loop_comp=1;
            foreach ($dimensiones as $dim) {
                //echo $dim.$dim->getTipogc();
                $tipo=$dim->getTipogc();
                if($tipo==8){//Fallas
                    $falla->setOrden(299);
                    $em->persist($falla);            
                    $componente=$falla;
                    $a_d=new AlumnoDimension();
                    $a_d->setAlumno($alumno);
                    $a_d->setAsignatura($asg);
                    $a_d->setDimension($componente);                   
                    $a_d->setNota(-1);                    
                    $em->persist($a_d); 
                    $em->persist($componente);
                    //echo "falla";
                 }
                
            }
        }
        $em->flush();
        //echo "----------------------------------------<br/>";

}
public function elimininarCompoCa($ca){
}
 public  function getDatosAlumnoImpresion(Alumno $alumno,
            $areas,
            $periodos_escolares,
            \Netpublic\CoreBundle\Entity\Colegio $colegio,
            $periodo_activo,
            $grupo_id
            ) {                
        $contador_periodos=0;
        $areas_json=array();
        $nota_periodo_area_json=array();
        $notas_asg_json=array();
        $contador_periodos_aras=0;
        $inasistencia=0;
        $inasistencia_areas=0;        
        foreach ($areas as $area) {  
            //echo $asignatura;
            
             $asig_area=  $this->getAsignaturasArea($area->getId());
                
             $notas_areas=$this->getNotasAreasAlumno($alumno->getId()
                             ,$area->getId(),$periodo_activo->getPadre()->getId());
                     
             //Calculamos la iNasistencia
             
             //Calculamos Areas
             $promedio_area=0;
             foreach ($notas_areas as $n) {
                 //Notas del area en los periodos academicos                 
                 $nota_periodo_area_json=array();
                 $contador_periodos_aras=0;
                 foreach ($periodos_escolares as $p_a) {
                     $nota_area_periodo=  $this->getNotasAreasAlumnoPeriodo(
                                                 $alumno->getId(),
                                                 $area->getId(),
                                                 $p_a->getId());
                     $nota_periodo_area=array(
                             "nota"=>" ",
                             "nombre"=>" "
                                 );

                     foreach ($nota_area_periodo as $n_a_p) {
                         $nota_periodo_area[]=array(
                             "nota"=>  number_format($n_a_p->getNota(),1),
                             "nombre"=>"$p_a"
                                 );
                     }
                     $nota_periodo_area_json[]=$nota_periodo_area;
                     $contador_periodos_aras++;
                 }
                 
                 $promedios_notas=0;
                 $contador_periodos=0;                 
                  $notas_asg_json=array();
                  $inasistencia_areas=0;
                  foreach ($asig_area as $asg) { 
                      //echo "----$asg------<br/>";
                      $notas_asig=array();
                      $nro_cara=0;
                      $nota_asg_cada_periodo=array();                      
                      $inasistencia=0;                      
                      //Desempeños
                      $alumno_desem=$this->getDesempenosAsignaturaPeriodo(
                              $periodo_activo->getId(),
                              $alumno->getId(),
                              $asg->getId());
                      $descripcion="";
                      $descriptores_asig=array();
                      
                      foreach ($alumno_desem as $nota_desempeno) {
                              if ($nota_desempeno->getIndexDesempeno()==1){                                                    
                                  $descripcion=$nota_desempeno->getDesempeno()->getDescripcionInsuficiente(); 
                                  $descripcion.=$nota_desempeno->getDesempeno()->getObservacionPerdida();   
                              }
                             elseif ($nota_desempeno->getIndexDesempeno()==2){
                                 $descripcion=$nota_desempeno->getDesempeno()->getDescripcionAceptable();   
                             }
                             elseif ($nota_desempeno->getIndexDesempeno()==3){
                                $descripcion=$nota_desempeno->getDesempeno()->getDescripcionExcelente();
                             }                       
                             elseif ($nota_desempeno->getIndexDesempeno()==4){
                               $descripcion=$nota_desempeno->getDesempeno()->getDescripcionSobresaliente();                              
                               $descripcion.=$nota_desempeno->getDesempeno()->getObservacionSobresaliente();
                             }
                             else{
                                 $descripcion="";
                             }
                             $descripcion=  strip_tags($descripcion);
                             $descripcion= str_replace("\\","",$descripcion);
                             $nro_cara+=strlen($descripcion);
                          $descriptores_asig[]=array(
                              "descripcicion"=>  $descripcion
                          );
                      }
                      
                  //    $descriptores_asig=$a_d_;
                      $promedios_notas=0;
                      $contador_periodos=0;                 
                      foreach ($periodos_escolares as $p_a) {
                          //Calculas las inasistencia
                          $inasistencias=$this->getInasistenciaAsignaturaPeriodo(
                                  $p_a->getId(),
                                  $alumno->getId(),
                                  $asg->getId());
                          foreach ($inasistencias as $inas) {
                              if($inas->getNota()!=-1)
                              $inasistencia=$inasistencia+ $inas->getNota();
                          }
                          
                            $notas4523=  $this->getNotasAsignaturaPeriodo(
                                    $p_a->getId(),
                                    $alumno->getId(), 
                                    $asg->getId());                                                        
                            $notas_cada_asg_periodo["periodo"]=array(
                                   "nota"=>" ",
                                   "asignatura"=>" ",
                                   "periodo"=>" "                                   
                                );                                                        
                            foreach ($notas4523 as $v) {                                
                                $m_n=$v->getNota();
                                $notas_cada_asg_periodo["periodo"]=array(
                                   "nota"=>number_format($v->getNota(),1),
                                   "asignatura"=>"$asg",                                  
                                   "periodo"=>"$p_a"                                   
                                );
                        //         echo "$asg";  
                            $promedios_notas+=number_format($m_n,1);                                                        
                            }
                            $contador_periodos++;
                     $nota_asg_cada_periodo[]=$notas_cada_asg_periodo;
                    }
                    $inasistencia_areas+=$inasistencia;
                    if($contador_periodos>0){
                        $promedio_asg=  number_format($promedios_notas/$contador_periodos,1);
                        $promedio_asg=  $promedio_asg;
                    }
                    else {
                        $promedio_asg=-1;
                    }
                    $recupe=$this->getEntityManager()->getRepository("NetpublicCoreBundle:NotaRecuperacion")
                                            ->findRecuperacionesAsgAlumno($periodo_activo->getPadre()->getId(),$alumno->getId(),$asg->getId());
                    
                    $carga_academica=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:CargaAcademica")->findOneBy(array(
                        'asignatura'=>$asg->getId(),
                        'grupo'=>$grupo_id,
                        'ano_escolar'=>$periodo_activo->getPadre()->getId()
                    ));                
                    $nota_recuperacion=" ";
                                    $actividades_rec=" ";
                                    $recupera=0;
                                    foreach ($recupe as $r) {
                                         $nota_recuperacion=$r->getNotaRecuperacion();
                                         $actividades_rec=$r->getObservacion();
                                         $recupera=1;
                                    } 
                                    
                        
                $desempeno_asg="-";
                if($promedio_asg > $colegio->getValorMinimoSobresaliente() &&
                   $promedio_asg <= $colegio->getValorMaximoSobresaliente()){
                        $desempeno_asg="SUPERIOR";
                }
                if ($promedio_asg > $colegio->getValorMinimoAceptable() &&
                        $promedio_asg<=$colegio->getValorMaximoAceptable()){
                        $desempeno_asg="ALTO";
                }
                if ($promedio_asg > $colegio->getValorMinimoInsuficiente() &&
                        $promedio_asg <=$colegio->getValorMaximoInsuficiente()){
                     $desempeno_asg="BÁSICO";
                }
              
                if ($promedio_asg >= $colegio->getValorMinimoDeficiente() && 
                   $promedio_asg <=$colegio->getValorMaximoDeficiente()){
                   $desempeno_asg="BAJO";
                }
                $profesor=" ";
                if($carga_academica)
                    $profesor=$carga_academica->getProfesor();
                               $notas_asig["asignatura"]=array(
                                    "nota"=>"$promedio_asg",
                                    "nombre"=>"$asg",
                                    "ih"=>$asg->getFrucuenciaSemana(),
                                    "profesor"=>$profesor,
                                    "inasistencias"=>$inasistencia,         
                                    "periodos"=>$nota_asg_cada_periodo,
                                    "desempenos"=>$descriptores_asig,
                                    "valor_desempeno"=>$desempeno_asg,        
                                    "nro_caracteres"=>$nro_cara,
                                    "habilito"=>$recupera,
                                    "nota_recuperacion"=>$nota_recuperacion,
                                    "actividades_recuperacion"=>$actividades_rec,
                                     "id"=>$asg->getId(),         
                                    );
                    $notas_asg_json[]=$notas_asig;
                 }
                
                     if($n->getDimension()->getPadre()->getNivel()<=$periodo_activo->getNivel()){
                         $nota=$n->getNota();
                         if($n->getNota()==-1)
                           $nota=0;
                         $promedio_area+=number_format($nota,1);                          
                     }
                
                    
                    $contador_periodos++;                                    
             }
             echo "--------------------------------<br/>";
             $desempeno="error";
             if($contador_periodos_aras>0){
                   $promedio_area=  number_format($promedio_area/$contador_periodos_aras,1);                   
                $desempeno="-";
                if($promedio_area > $colegio->getValorMinimoSobresaliente() &&
                   $promedio_area <= $colegio->getValorMaximoSobresaliente()){
                        $desempeno="SUPERIOR";
                }
                if ($promedio_area > $colegio->getValorMinimoAceptable() &&
                        $promedio_area<=$colegio->getValorMaximoAceptable()){
                        $desempeno="ALTO";
                }
                if ($promedio_area > $colegio->getValorMinimoInsuficiente() &&
                        $promedio_area <=$colegio->getValorMaximoInsuficiente()){
                     $desempeno="BÁSICO";
                }
              
                if ($promedio_area >= $colegio->getValorMinimoDeficiente() && 
                   $promedio_area <=$colegio->getValorMaximoDeficiente()){
                   $desempeno="BAJO";
                }
                
                
             }
                
            $areas_json[]=array(
                 "nombre"=>$area->getNombre(),
                 "nota_promedio_acumalativa" =>$promedio_area,
                 "periodos"=>$nota_periodo_area_json,
                 "asignaturas"=>$notas_asg_json,
                 "inasistencia"=>$inasistencia_areas,
                 "desempeno"=>$desempeno
             );
            }            

    
            return $areas_json;        
    }        
 public function getAsignaturasArea($id_area) {        
        $em=  $this->getEntityManager();
            $query="SELECT a FROM NetpublicCoreBundle:Asignatura a";
            $query.=" WHERE a.area=:area_id";                                                                                                                
            $asig_area=$em->createQuery($query)                
                                    ->setParameters(array(
                                            "area_id"=>$id_area
                    ))->getResult();  
            return $asig_area;

    }
 public function getNotasAreasAlumno($id_alumno,$id_area,$padre_id){
        $em=  $this->getEntityManager();
        $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN d.padre p";
        $query.=" WHERE (";                                    
        $query.=" a_d.alumno=:alumno_id";                                    
        $query.=" AND a_d.asignatura=:asignatura_id"; 
        //$query.=" AND p.padre=:padre_id"; 
        $query.=" AND d.tipo=2";
        $query.=" )";                          
        $notas_areas=$em->createQuery($query)                
                        ->setParameters(array(
                          //   "padre_id"=>$padre_id,
                             "alumno_id"=>$id_alumno,
                            "asignatura_id"=>$id_area
        ))->getResult();            
        return $notas_areas;
    }
 public function getNotasAreasAlumnoPeriodo($id_alumno,$id_area,$id_periodo){
        $em=  $this->getEntityManager();
        $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d ";
        $query.=" WHERE (";                                    
        $query.=" a_d.alumno=:alumno_id";                                    
        $query.=" AND a_d.asignatura=:asignatura_id";   
        $query.=" AND d.padre=:padre_id";   
        $query.=" AND d.tipo=2";
        $query.=" )";                          
        $notas_areas=$em->createQuery($query)                
                        ->setParameters(array(                                                                                
                             "alumno_id"=>$id_alumno,
                            "asignatura_id"=>$id_area,
                            'padre_id'=>$id_periodo
        ))->getResult();                     
        return $notas_areas;
    }
   
 public function getNotasAsignaturaPeriodo($periodo_id,$alumno_id,$asignatura_id) {
        $em=  $this->getEntityManager();
        $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
        $query.=" WHERE (d.id=:id";                                    
        $query.=" AND a_d.alumno=:alumno_id";                                  
        $query.=" AND a_d.asignatura=:asignatura_id";                                    
        $query.=" AND d.tipo=1)";                          
        $notas4523=$em->createQuery($query)                
                 ->setParameters(array(
                  "id"=>$periodo_id,
                  "alumno_id"=>$alumno_id,
                  "asignatura_id"=>$asignatura_id
                   ))->getResult();
        return $notas4523;
        
    }
 public function getInasistenciaAsignaturaPeriodo($periodo_id,$alumno_id,$asignatura_id) {
        $em=  $this->getEntityManager();
        $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
        $query.=" WHERE (d.padre=:id";                                    
        $query.=" AND a_d.alumno=:alumno_id";                                  
        $query.=" AND a_d.asignatura=:asignatura_id";                                    
        $query.=" AND d.tipo=3)";                          
        $notas4523=$em->createQuery($query)                
                 ->setParameters(array(
                  "id"=>$periodo_id,
                  "alumno_id"=>$alumno_id,
                  "asignatura_id"=>$asignatura_id
                   ))->getResult();
        return $notas4523;
        
    }
 public function getDesempenosAsignaturaPeriodo(
           $periodo_id,
           $alumno_id,
           $asignatura_id) {
        $em=  $this->getEntityManager();
        $query="SELECT a_d,de FROM NetpublicCoreBundle:AlumnoDesempeno a_d JOIN a_d.dimension d JOIN a_d.desempeno de";
        $query.=" WHERE (d.id=:id";                                    
        $query.=" AND a_d.alumno=:alumno_id";                                  
        $query.=" AND a_d.asignatura=:asignatura_id";                                    
        $query.=" )";                          
        $notas4523=$em->createQuery($query)                
                 ->setParameters(array(
                  "id"=>$periodo_id,
                  "alumno_id"=>$alumno_id,
                  "asignatura_id"=>$asignatura_id
                   ))->getResult();
        return $notas4523;
        
    }
 public function getNotasComponenteAlumno($id_alumno,$id_componente,$asignatura_id){
        $em=  $this->getEntityManager();
        $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
        $query.=" WHERE (";                                    
        $query.=" a_d.alumno=:alumno_id";                                    
        $query.=" AND a_d.asignatura=:asignatura_id";
        $query.=" AND a_d.dimension=:componente_id";        
        $query.=" AND d.tipo=4";
        $query.=" )";                          
        $notas_areas=$em->createQuery($query)                
                        ->setParameters(array(                                                                                
                             "alumno_id"=>$id_alumno,
                            "asignatura_id"=>$asignatura_id,
                            'componente_id'=>$id_componente
        ))->getOneOrNullResult();            
        return $notas_areas;
    }
    
    
 public function cancelarMatricula($alumno,$ano_escolar_id) {
        $em=$this->getEntityManager();
        //Dimension ano escolar        
        $matriculas=$em->getRepository("NetpublicCoreBundle:MatriculaAlumno")->findOneBy(array(
                     'ano'=>$ano_escolar_id,
                     'alumno'=>$alumno->getId()
                 ));
        $matriculas->setEsMatricula(FALSE);
        $em->persist($matriculas);
           $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
            $query.=" WHERE (d.padre=:periodo_id";            
            $query.=" AND a_d.alumno=:alumno_id";
            $query.=" )";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$ano_escolar_id,                                         
                                         "alumno_id"=>$alumno->getId(),                                         
                                      ))->getResult(); 
            //Preparamos para remover
            foreach ($entities as $e) {
                $em->remove($e);
            }
        
        $periodo_escolar=$em->getRepository("NetpublicCoreBundle:Dimension")->findBy(array(
               'padre'=>$ano_escolar_id
            )); 
        //Dimension Periodo academicos
         foreach ($periodo_escolar as $p_e_) {
            $query="DELETE NetpublicCoreBundle:AlumnoDimension a_d";
            $query.=" WHERE (a_d.dimension=:periodo_id";            
            $query.=" AND a_d.alumno=:alumno_id";
            $query.=" )";
            $em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$p_e_->getId(),                                         
                                         "alumno_id"=>$alumno->getId(),                                         
                                      ))->execute(); 
            
        }
         foreach ($periodo_escolar as $p_e) {
        //Dimension de Actividades de los periodos
            $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
            $query.=" WHERE (d.padre=:periodo_id";            
            $query.=" AND a_d.alumno=:alumno_id";
            $query.=" )";
            $entities_a=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$p_e->getId(),                                         
                                         "alumno_id"=>$alumno->getId(),                                         
                                      ))->getResult(); 
            foreach ($entities_a as $e_p) {
                            //Dimension de Actividades de los periodos
                            $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
                            $query.=" WHERE (d.padre=:periodo_id";            
                            $query.=" AND a_d.alumno=:alumno_id";
                            $query.=" )";
                            $entities_items=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$e_p->getDimension()->getId(),                                         
                                         "alumno_id"=>$alumno->getId(),                                         
                                      ))->getResult(); 
                      foreach ($entities_items as $items) {
                          $em->remove($items);
                      }
                    $em->remove($e_p);
            }
            //Borramos promedio de area y asistencia
            
         }
        $alumno->setGrupo();
        
        

    
}
    //Matricular alumno
 public function agregarDimensionnObligatorias(
            Alumno $alumno,
            Grupo $grupo_matricular,
            $asignatura,
            $peridos_academicos,
            $nota_defecto
            ){
        if($nota_defecto==null)
            $nota_defecto=-1;
          $em=  $this->getEntityManager();
          $alumno->setGrupo($grupo_matricular);
          $alumno->setEsNuevo(TRUE);
                                //Borramos las notas de los promedios anteriores
             $area_asg=$asignatura->getArea();
        foreach ($peridos_academicos as $p_a) {
                               $areas_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                                        ->findBy(array(
                                                    "padre"=>$p_a->getId(),
                                                    "tipo"=>2
                        ));
        
                        foreach ($areas_peridos_academicos as $ap_c) {
                            
                       $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d ";
                       $query.=" WHERE (";            
                       $query.=" a_d.dimension=:dimension AND";
                       $query.=" d.tipo=2 AND";
                       $query.=" a_d.alumno=:alumno_id AND";                            
                       $query.=" a_d.asignatura=:asignatura_id AND";                       
                       $query.=" d.padre=:padre_id";                       
                       $query.=" )";
                       $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "dimension"=>$ap_c->getId(),
                                         "asignatura_id"=>$area_asg->getId(),
                                         "padre_id"=>$p_a->getId(),
                                         'alumno_id'=>$alumno->getId()
                                      ))->getResult();
                              foreach ($entities as $v) {
                                  echo $v;
                                  $em->remove($v);
                              }           
                        }
                        
        }
        $em->flush();
        foreach ($peridos_academicos as $p_a) { 
                       $areas_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                                        ->findBy(array(
                                                    "padre"=>$p_a->getId(),
                                                    "tipo"=>2
                        ));
                       foreach ($areas_peridos_academicos as $areas_p_a) {                                                
                              $a_d=new AlumnoDimension();
                              $a_d->setAlumno($alumno);
                              $a_d->setAsignatura($area_asg);                    
                              $a_d->setDimension($areas_p_a);                                        
                              $a_d->setNota($nota_defecto);
                              $a_d->setNotaBuffered(-1);
                              $em->persist($a_d);   
                       }
                   }               
              //Registrso de asignatuatras 
                  foreach ($peridos_academicos as $p_a) {
                             $a_d=new AlumnoDimension();
                             $a_d->setAlumno($alumno);
                             $a_d->setAsignatura($asignatura);                    
                             $a_d->setDimension($p_a);                                        
                             $a_d->setNota($nota_defecto);
                             $a_d->setNotaBuffered(-1);
                             $em->persist($a_d);
                             //ASistencia de los periodos
                             $asistencia_peridos_academicos=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Dimension")
                                            ->findBy(array(
                                      "padre"=>$p_a->getId(),
                                      "tipo"=>3
                             ));
                            foreach ($asistencia_peridos_academicos as $a_p_a) {
                                 $a_d=new AlumnoDimension();
                                 $a_d->setAlumno($alumno);
                                 $a_d->setAsignatura($asignatura);                    
                                 $a_d->setDimension($a_p_a);                                        
                                 $a_d->setNota($nota_defecto);
                                 $a_d->setNotaBuffered(-1);
                                 $em->persist($a_d);      
                            }
                  //Actividades de Periodo
                  }                       
        }
 public  function registrarEstudiante(Alumno $alumno,  Dimension $ano_escolar_activo){
      $em= $this->getEntityManager();
       $query = $em->createQuery('SELECT count(a) FROM NetpublicCoreBundle:Usuario a WHERE a.username LIKE :cedula')
                        ->setParameters(array(
                           "cedula"=>$alumno->getNombre().'%'                                                    
                                )
                );
       $count = $query->getSingleScalarResult();
       $nombre=$alumno->getNombre();
       if($count>0){
	     $nombre=$nombre.$count;
       }
      //Generamos claves temporalares a los alumno registrados como nuevo
      $usuario=new Usuario();             
      $usuario->setUsername($nombre);
      $usuario->setSalt(md5(time()));
      $encoder = new MessageDigestPasswordEncoder('sha512', true, 10);
      $password = $encoder->encodePassword($alumno->getCedula(), $usuario->getSalt());
      $usuario->setPassword($password);
      $usuario->setEsAlumno(TRUE); 
      $usuario->setAlumno($alumno);
      $alumno->setUsuario($usuario);
      $rol=  $em->getRepository("NetpublicCoreBundle:Rol")->findOneBy(array("role"=>"ROLE_ESTUDIANTE"));
      $usuario->addRol($rol); 
           
      $reg_matricula=new MatriculaAlumno();
      $reg_matricula->setAlumno($alumno);
      $reg_matricula->setAno($ano_escolar_activo);
      $reg_matricula->setEsMatricula(FALSE);
      $reg_matricula->setEsPagoMatricula(TRUE);
      $reg_matricula->setEsPapeles(TRUE);
      $reg_matricula->setEsUltimaMatricula(TRUE);
      $reg_matricula->setObservaciones("Escriba observaciones del proceso de matricula");
      $em->persist($reg_matricula);
      $em->persist($usuario);
      
      return $usuario;    
        
    }
 public  function findMatricula(Alumno $alumno,$ano_escolar){
        $em=  $this->getEntityManager();
        $matricula=$em->getRepository("NetpublicCoreBundle:MatriculaAlumno")->findOneBy(array(
            "ano"=>$ano_escolar->getId(),
            "alumno"=>$alumno->getId()
        ));
        return $matricula;
    }
 public function getNroAlumnosAdicionados($grupo){         
        $query="SELECT count(a) FROM NetpublicCoreBundle:Alumno a";
        $query.=" WHERE (a.grupo=:grupo_id";
        $query.=" AND a.es_adicion=1";
        $query.=" )";                          
        $nro=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "grupo_id"=>$grupo
                                    ))->getSingleScalarResult();
                             
                             
                            
        return $nro+0;        
    }
 public function getNotaPromedioAreas(Alumno $alumno, $periodo_escolar){        
            $grado=$alumno->getGrado();
            $promedio_area=0;
            $numeros_materias_area=0;           
            $em=  $this->getEntityManager();
            if($grado){
            $areas=$em->getRepository("NetpublicCoreBundle:Asignatura")
                        ->findBy(array(
                       'grado'=>$grado->getId(),
                       'es_area'=>1
                   ));            
            $numeros_materias_area=0; 
            foreach ($areas as $asignatura) { 
                
                            $numeros_materias_area++;                    
                            $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
                            $query.=" WHERE (d.padre=:periodo_id";
                            $query.=" AND a_d.asignatura=:asignatura_id";
                            $query.=" AND a_d.alumno=:alumno_id";
                            $query.=" AND d.tipo=2)";            
                            $notas=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo_escolar,
                                         "asignatura_id"=>$asignatura->getId(),
                                         "alumno_id"=>$alumno->getId()                                     
                                      ))->getResult();     
                            foreach ($notas as $nota_) {
                                   $nota_tem=$nota_->getNota(); 
                                   $promedio_area+=$nota_tem;
                                   //echo "--$nota_tem";
                                   if($nota_tem>0){                                    
                                   
                                   }
                            }
       
            }
       }
            if($numeros_materias_area>0){
               $promedio_area=$promedio_area/$numeros_materias_area;           
               //echo "$promedio_area";
            }
           return $promedio_area;
            
  }
 public function gruardarNotasAlumno($ids_a_d,$values_a_d,$padre) {
      $em=  $this->getEntityManager();
      
      $promedio=0;
      $total_ponderado=0;
      for ($index = 0; $index < count($ids_a_d); $index++) {
             $id_nota=$ids_a_d[$index]; 
            $nota=$em->getRepository("NetpublicCoreBundle:AlumnoDimension")->find($id_nota);
            $ponderado_dim=$nota->getDimension()->getPonderado();
            $promedio+=$values_a_d[$index]*$ponderado_dim;
            $total_ponderado+=$ponderado_dim;
            //Flujo De trabajo
            if($values_a_d[$index]!=-1){
                $nota->setEsIngresadad(TRUE);
                $nota->setEsModificada(TRUE);
            }
            /*if($nota->getNotaBuffered()==-1){
                $nota->setEsIngresadad(TRUE);
                $nota->setFechaUltimoIngreso(new \DateTime);
            }
            else{
                if($nota->getNotaBuffered()!=$values_a_d[$index]){
                    $nota->setEsModificada(TRUE);
                    $nota->setFechaUltimoCambio(new \DateTime);
                }
            
            }*/
            $nota->setNotaBuffered($values_a_d[$index]);
	    $nota->setNota($values_a_d[$index]);
            $em->persist($nota);           
      }
      $nota_padre=$em->getRepository("NetpublicCoreBundle:AlumnoDimension")->find($padre);
      if($total_ponderado==0){
          $total_ponderado=1;
      } 
      $nota_final=  number_format($promedio/$total_ponderado,1);
      $nota_padre->setNota($nota_final);
      
      $em->persist($nota_padre);      
      return $nota_final;
      
      
      
  }
 public function publicarNotasAlumno($area_id,$alumno_id,$periodo_id){
        $em=  $this->getEntityManager();
        //CAlculas notas para las Areas  
        $asignaturasAreas=$em->getRepository("NetpublicCoreBundle:Asignatura")->findBy(array(
            'area'=>$area_id,
            'es_area'=>0
        ));
        $query="SELECT d FROM NetpublicCoreBundle:Dimension d";
            $query.=" WHERE (d.id<=:periodo_id";
            $query.=" AND d.tipo=1)";                            
            $periodos_trabajados=$em->createQuery($query)                
                       ->setParameters(array(
                               "periodo_id"=>$periodo_id,
                                                                                    
                               ))->getResult(); 
            
    foreach ($periodos_trabajados as $periodo) {
                   
        $promedio_area=0;
        $contador_asignaturas_area=0;
        foreach ($asignaturasAreas as $asignatura) {
            //echo "$asignatura.$periodo";
            $contador_asignaturas_area++;
            $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
            $query.=" WHERE (a_d.dimension=:periodo_id";
            $query.=" AND a.id=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
            $query.=" AND d.tipo=1)";                            
            $entity=$em->createQuery($query)                
                       ->setParameters(array(
                               "periodo_id"=>$periodo->getId(),
                               "asignatura_id"=>$asignatura->getId(),
                               "alumno_id"=>$alumno_id                                                        
                               ))->getResult(); 
            if(count($entity)>0){
                $promedio_area+=$entity[0]->getNota();
                
            }
            else{
                $promedio_area=0;
            }
        }
	$query="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
        $query.=" WHERE (";
        $query.=" d.padre=:periodo_id";
        $query.=" AND a.id=:asignatura_id";
        $query.=" AND a_d.alumno=:alumno_id";
        $query.=" AND d.tipo=2)";                            
        $count=$em->createQuery($query)                
                  ->setParameters(array(
                            "periodo_id"=>$periodo->getId(),
                            "asignatura_id"=>$area_id,
                            "alumno_id"=>$alumno_id                                                        
                    ))->getSingleScalarResult(); 
        if($count>0){
              $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
              $query.=" WHERE (";
              $query.=" d.padre=:periodo_id";
              $query.=" AND a.id=:asignatura_id";
              $query.=" AND a_d.alumno=:alumno_id";
              $query.=" AND d.tipo=2)";                            
              $entity_=$em->createQuery($query)                
                          ->setParameters(array(
                            "periodo_id"=>$periodo->getId(),
                            "asignatura_id"=>$area_id,
                             "alumno_id"=>$alumno_id                                                        
                       ))->getResult(); 
               $entity_[0]->setNota(number_format($promedio_area/$contador_asignaturas_area,1));                            
               $em->persist($entity_[0]);
               if($count>=2){
                   for ($index = 1; $index < count($entity_); $index++) {
                       $em->remove($entity_[$index]);
                   }
                    
               }
      }
     
   }   
  }
 public function publicarDesempenos($alumno,$asignatura_id,$periodo,$desempenos){
         $em=  $this->getEntityManager();
        $colegio=$em->getRepository("NetpublicCoreBundle:Colegio")->findOneBy(array(
            'es_principal'=>1
        ));
        $valor_minimo_deficiente=$colegio->getValorMinimoDeficiente();
        $valor_maximo_deficiente=$colegio->getValorMaximoDeficiente();
        $valor_minimo_insuficiente=$colegio->getValorMinimoInsuficiente();
        $valor_maximo_insuficiente=$colegio->getValorMaximoInsuficiente();
        $valor_minimo_aceptable=$colegio->getValorMinimoAceptable();
        $valor_maximo_aceptable=$colegio->getValorMaximoAceptable();
        $valor_minimo_sobresaliente=$colegio->getValorMinimoSobresaliente();
        $valor_maximo_sobresaliente=$colegio->getValorMaximoSobresaliente();    
        
        foreach ($desempenos as $desempeno){ 
                
              $actividad_desempeno=$em->getRepository("NetpublicCoreBundle:AlumnoDesempeno")
                                   ->getDimensionGrupo($desempeno->getId());
              $promedio=0;
              $acum_porcentaje=0;
              foreach ($actividad_desempeno as $a_d) {  
                  $nota_dim=$em->getRepository("NetpublicCoreBundle:Alumno")
                                  ->getNotasComponenteAlumno(
                                                 $alumno->getId(),
                                                 $a_d->getActividad()->getId(),
                                                 $asignatura_id                                                 
                                                 );
                                                 
                           //echo "Nota({$a_d->getActividad()}):".$nota_dim;
                                    //echo "$alumno--nota:$nota {$nota->getDimension()}";
                                    $porcentaje=$a_d->getPorcentaje();
                                    $v_nota=$nota_dim->getNota();
                                    $promedio=$promedio+($v_nota*$porcentaje);
                                    $acum_porcentaje+=$porcentaje;
                            
             }          
			if($acum_porcentaje>0)
                        $promedio=$promedio/$acum_porcentaje;
                        $alumn_des=$em->getRepository("NetpublicCoreBundle:AlumnoDesempeno")->getAlumnoDesempeno($alumno->getId(),$asignatura_id,$desempeno->getId());
                        if($alumn_des==null){                        
                            $alumn_des=new AlumnoDesempeno();
                            $alumn_des->setAlumno($alumno);
                            $alumn_des->setAsignatura($desempeno->getAsignatura()->getAsignatura());
                            $alumn_des->setDesempeno($desempeno);                        
                            $alumn_des->setDimension($periodo);
                            $alumn_des->setTieneDescriptorAdicional(0);
                            $alumn_des->setEsImprimirBoletin(TRUE);
                            
                            
                        }  
                        
                        $indexDesempeno=-1;
                        if($promedio>=$valor_minimo_deficiente && $promedio<$valor_maximo_deficiente){
                            $indexDesempeno=1;
                        }
                        if($promedio>=$valor_minimo_insuficiente && $promedio<$valor_maximo_insuficiente){
                            $indexDesempeno=2;
                        }
                        if($promedio>=$valor_minimo_aceptable && $promedio<$valor_maximo_aceptable){
                            $indexDesempeno=3;
                        }
                        if($promedio>=$valor_minimo_sobresaliente && $promedio<=$valor_maximo_sobresaliente){
                            $indexDesempeno=4;
                        } 
                        $alumn_des->setIndexDesempeno($indexDesempeno);
                        $em->persist($alumn_des);
                    }
            }        
 public function findAsgPerdidas($alumno_id,$periodo_escolares,$nota_minima,$areas) {
     $asg_perdidas=array();  
     foreach ($areas as $area) {  
         $asignaturas=  $this->getEntityManager()->getRepository("NetpublicCoreBundle:Asignatura")->findBy(array(
             'area'=>$area->getId(),
             'es_area'=>false
         ));
         //Calculamos Areas
         foreach ($asignaturas as $asg) {
             $promedio_area=0;
            $numeros_periodos_area=0;
            $promedios_areas_temp=0;             
            $nro_periodos=0;
            $promedio_acum=0;
            foreach ($periodo_escolares as $p_e) {
                             $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
                             $query.=" WHERE (d.id=:periodo_id";
                             $query.=" AND a_d.asignatura=:asignatura_id";
                             $query.=" AND a_d.alumno=:alumno_id";
                             $query.=" AND d.tipo=1)";                          
                             $notas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "periodo_id"=>$p_e->getId(),
                                            "asignatura_id"=>$asg->getId(),
                                            "alumno_id"=>$alumno_id                                     
                                    ))->getResult();     //                
                             foreach ($notas as $nota) {
                                 $promedio_acum=$promedio_acum+"$nota";
                                 $nro_periodos++;
                                 //echo $nota->getAsignatura().':'.$nota;
                              }
           }
           if($nro_periodos>0){
               $promedio_area=$promedio_acum/$nro_periodos;
               if($promedio_area<$nota_minima){
                   $asg_perdidas[]=array(
                       "asg"=>$asg,
                       'nota'=>$promedio_area
                           );
                    //echo "asi: $promedio_area";
                    //echo "asignatura perdida";
               }
               
           }
         }
     }
     return $asg_perdidas;
            
}

 public function findNotas($alumno_id,$componete_periodo,$asignatura){ 
        $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
        $query.=" WHERE (";
        $query.=" (d.padre=:dimension_id";
        $query.=" AND a_d.asignatura=:asignatura_id";        
        $query.=" AND d.tipo=4";        
        $query.=" AND a_d.alumno=:alumno_id";        
        $query.=" )";
        $query.=" OR";
        $query.=" (d.padre=:dimension_id";
        $query.=" AND a_d.asignatura=:asignatura_id";        
        $query.=" AND d.tipo=3";        
        $query.=" AND a_d.alumno=:alumno_id";        
        $query.=" )";
        $query.=" OR";
        $query.=" (d.id=:dimension_id";
        $query.=" AND a_d.asignatura=:asignatura_id";        
        $query.=" AND (d.tipo=4 OR d.tipo=1)";        
        $query.=" AND a_d.alumno=:alumno_id";        
        $query.=" )";

        $query.=" )";
        $query.=" ORDER BY d.orden ASC";        

        $nro_asg_perdidas=  $this->getEntityManager()->createQuery($query)                
                              ->setParameters(array(
                                            "dimension_id"=>$componete_periodo,                                                                               
                                            "asignatura_id"=>$asignatura,
                                            "alumno_id"=>$alumno_id                                            
                                    ))->getResult();
                             
                             
        
        return $nro_asg_perdidas;        
    } 
    public function promover($alumno,$periodo_escolares,$nota_minima,$areas,$ano_escolar) {
        $em=  $this->getEntityManager();
        $alumno_id=$alumno->getId();
        $nro_areas=$em->getRepository("NetpublicCoreBundle:Alumno")
                      ->getAreasPerdidas($alumno->getId(),$periodo_escolares,$nota_minima,$areas);
        
        $condiciones_habilitar=$em->getRepository("NetpublicCoreBundle:CriterioPromocion")
                                  ->findCriteriosHabilitar();
        $condiciones_perder=$em->getRepository("NetpublicCoreBundle:CriterioPromocion")
                                  ->findCriteriosPerder();
        //Si el alumno recupero, tenemos que borrar notas de recuperacion.
        $recuperaciones_viejas= $em->createQuery("SELECT a FROM NetpublicCoreBundle:NotaRecuperacion a JOIN a.nota n WHERE a.ano_escolar=:ano AND n.alumno=:alumno ")
                            ->setParameter('ano',$ano_escolar->getId())
                            ->setParameter('alumno',$alumno->getId())
                            ->getResult();
                    foreach ($recuperaciones_viejas as $r) {
                        $em->remove($r);
                    }
                    $em->flush();
        //Resolvemos Protocolos de la criterios
          //$grupo_siguiente=$em->getRepository("NetpublicCoreBundle:Grupo")->find($grupo_siguiente_id);
          //$alumno->setGrupoPromovido($grupo_siguiente);
        if($nro_areas==0){
            $resultado="Gano Año escolar";
            $alumno->setSituacionAcademicaAnoAnterior(1);
            $alumno->setEsHabilitacion(0);
            $alumno->setRepitente(0);
           
            
        }
        else{
        //Para habilitar
            if($condiciones_habilitar){
                $simbolo_habilitar=$condiciones_habilitar->getSimbolo();
                $valor_habilito=$condiciones_habilitar->getValor();
                if ($simbolo_habilitar=='>=') {
                    if($nro_areas>=$valor_habilito){
                        $alumno->setSituacionAcademicaAnoAnterior(0);
                        $alumno->setEsHabilitacion(1);
                        $periodo_escolar_activo=$em->getRepository("NetpublicCoreBundle:Dimension")->findPeriodoEscolarActivo();
                        $ultimo_periodo=$session->get('perido',$periodo_escolar_activo->getId());
                        $asg_perdidas=$em->getRepository("NetpublicCoreBundle:Alumno")->findAsgPerdidas(
                        $alumno_id,$periodo_escolares,$nota_minima,$areas);
                        $resultado="recupero ";
                        foreach ($asg_perdidas as $asg) {
                            $nota_ultimo_periodo=  $em->getRepository("NetpublicCoreBundle:AlumnoDimension")->findOneBy(array(
                            'alumno'=>$alumno_id,
                            'asignatura'=>$asg['asg']->getId(),
                            'dimension'=>$ultimo_periodo,

                            ));
                            $recuperacion=new \Netpublic\CoreBundle\Entity\NotaRecuperacion();
                            $recuperacion->setAnoEscolar($ano_escolar);
                            $recuperacion->setNota($nota_ultimo_periodo);
                            $recuperacion->setNotaRecuperacion(0.0);
                            $recuperacion->setObservacion("Por escribe las aqui las actividades realizadas para la recuperación del estudiante");
                            $em->persist($recuperacion);
                        }
                    }
                }
            if ($simbolo_habilitar=='>') {
                if($nro_areas>$valor_habilito){
                     $alumno->setEsHabilitacion(1);
                     $alumno->setSituacionAcademicaAnoAnterior(0);
                     $periodo_escolar_activo=$em->getRepository("NetpublicCoreBundle:Dimension")->findPeriodoEscolarActivo();
                     $ultimo_periodo=$session->get('perido',$periodo_escolar_activo->getId());
                     $asg_perdidas=$em->getRepository("NetpublicCoreBundle:Alumno")->findAsgPerdidas(
                                $alumno_id,$periodo_escolares,$nota_minima,$areas);
                     $resultado="recupero ";
                     foreach ($asg_perdidas as $asg) {
                            $nota_ultimo_periodo=  $em->getRepository("NetpublicCoreBundle:AlumnoDimension")->findOneBy(array(
                            'alumno'=>$alumno_id,
                            'asignatura'=>$asg['asg']->getId(),
                            'dimension'=>$ultimo_periodo,

                            ));
                            $recuperacion=new \Netpublic\CoreBundle\Entity\NotaRecuperacion();
                            $recuperacion->setAnoEscolar($ano_escolar);
                            $recuperacion->setNota($nota_ultimo_periodo);
                            $recuperacion->setNotaRecuperacion(0.0);
                            $recuperacion->setObservacion("Por escribe las aqui las actividades realizadas para la recuperación del estudiante");
                            $em->persist($recuperacion);
                     }
                }
           }
        if ($simbolo_habilitar=='<') {
            if($nro_areas<$valor_habilito){
                $alumno->setEsHabilitacion(1);
                $alumno->setSituacionAcademicaAnoAnterior(0);
                $periodo_escolar_activo=$em->getRepository("NetpublicCoreBundle:Dimension")->findPeriodoEscolarActivo();
                $ultimo_periodo=$session->get('perido',$periodo_escolar_activo->getId());
                $asg_perdidas=$em->getRepository("NetpublicCoreBundle:Alumno")->findAsgPerdidas(
                        $alumno_id,$periodo_escolares,$nota_minima,$areas);
                $resultado="recupero ";
                foreach ($asg_perdidas as $asg) {
                    $nota_ultimo_periodo=  $em->getRepository("NetpublicCoreBundle:AlumnoDimension")->findOneBy(array(
                    'alumno'=>$alumno_id,
                    'asignatura'=>$asg['asg']->getId(),
                    'dimension'=>$ultimo_periodo,
                        
                    ));
                    $recuperacion=new \Netpublic\CoreBundle\Entity\NotaRecuperacion();
                    $recuperacion->setAnoEscolar($ano_escolar);
                    $recuperacion->setNota($nota_ultimo_periodo);
                    $recuperacion->setNotaRecuperacion(0.0);
                    $recuperacion->setObservacion("Por escribe las aqui las actividades realizadas para la recuperación del estudiante");
                    $em->persist($recuperacion);
                    //echo $nota_p->getAsignatura().':'.$nota_p."--";
                }   
            }
        }
        if ($simbolo_habilitar=='<=') {
            if($nro_areas<=$valor_habilito){
                $alumno->setEsHabilitacion(1);
                $alumno->setSituacionAcademicaAnoAnterior(0);
                $periodo_escolar_activo=$em->getRepository("NetpublicCoreBundle:Dimension")->findPeriodoEscolarActivo();
                $ultimo_periodo=$periodo_escolar_activo->getId();
                $asg_perdidas=$em->getRepository("NetpublicCoreBundle:Alumno")->findAsgPerdidas(
                        $alumno_id,$periodo_escolares,$nota_minima,$areas);
                $resultado="recupero ";
                foreach ($asg_perdidas as $asg) {
                    $nota_ultimo_periodo=  $em->getRepository("NetpublicCoreBundle:AlumnoDimension")->findOneBy(array(
                    'alumno'=>$alumno_id,
                    'asignatura'=>$asg['asg']->getId(),
                    'dimension'=>$ultimo_periodo,
                        
                    ));
                    $recuperacion=new \Netpublic\CoreBundle\Entity\NotaRecuperacion();
                    $recuperacion->setAnoEscolar($ano_escolar);
                    $recuperacion->setNota($nota_ultimo_periodo);
                    $recuperacion->setNotaRecuperacion(0.0);
                    $recuperacion->setObservacion("Por escribe las aqui las actividades realizadas para la recuperación del estudiante");
                    $em->persist($recuperacion);
                    //echo $nota_p->getAsignatura().':'.$nota_p."--";
                }
             }
        }   
        if ($simbolo_habilitar=='=') {
            if($nro_areas==$valor_habilito){
                $alumno->setEsHabilitacion(1);
                $alumno->setSituacionAcademicaAnoAnterior(0);
                $periodo_escolar_activo=$em->getRepository("NetpublicCoreBundle:Dimension")->findPeriodoEscolarActivo();
                $ultimo_periodo=$session->get('perido',$periodo_escolar_activo->getId());
                $asg_perdidas=$em->getRepository("NetpublicCoreBundle:Alumno")->findAsgPerdidas(
                        $alumno_id,$periodo_escolares,$nota_minima,$areas);
                $resultado="recupero";
                foreach ($asg_perdidas as $asg) {
                    $nota_ultimo_periodo=  $em->getRepository("NetpublicCoreBundle:AlumnoDimension")->findOneBy(array(
                    'alumno'=>$alumno_id,
                    'asignatura'=>$asg['asg']->getId(),
                    'dimension'=>$ultimo_periodo,
                        
                    ));
                    $recuperacion=new \Netpublic\CoreBundle\Entity\NotaRecuperacion();
                    $recuperacion->setAnoEscolar($ano_escolar);
                    $recuperacion->setNota($nota_ultimo_periodo);
                    $recuperacion->setNotaRecuperacion(0.0);
                    $recuperacion->setObservacion("Por escribe las aqui las actividades realizadas para la recuperación del estudiante");
                    $em->persist($recuperacion);
                    //echo $nota_p->getAsignatura().':'.$nota_p."--";
                }      

            }
        }
        }
// Perder
      if($condiciones_perder){
        $simbolo_perder=$condiciones_perder->getSimbolo();
        $valor_perder=$condiciones_perder->getValor();
        if ($simbolo_perder=='>=') {
            if($nro_areas>=$valor_perder){
                $resultado=" perdio año";
                $alumno->setRepitente(1);
                $alumno->setSituacionAcademicaAnoAnterior(2);
                $alumno->setEsHabilitacion(0);
            }
        }
        if ($simbolo_perder=='>') {
            if($nro_areas>$valor_perder){
                $alumno->setRepitente(1);
                 $alumno->setSituacionAcademicaAnoAnterior(2);
                 $alumno->setEsHabilitacion(0);
            }
        }
        if ($simbolo_perder=='<') {
            if($nro_areas<$valor_perder){
                $alumno->setRepitente(1);                
                 $alumno->setSituacionAcademicaAnoAnterior(2);
                 $alumno->setEsHabilitacion(0);
            }
        }
        if ($simbolo_perder=='<=') {
            if($nro_areas<=$valor_perder){
                $alumno->setRepitente(1);
                 $alumno->setSituacionAcademicaAnoAnterior(2);
                $alumno->setEsHabilitacion(0);
            }
        }
        if ($simbolo_perder=='=') {
            if($nro_areas==$valor_perder){
                $alumno->setRepitente(1);
                $alumno->setSituacionAcademicaAnoAnterior(2);
               $alumno->setEsHabilitacion(0);
            }
        }
   
        }
            }
            
   $em->persist($alumno);
   $em->flush();
   //echo $resultado.$alumno."<br/>";
   return $alumno;
            }

}