<?php

namespace Netpublic\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Netpublic\CoreBundle\Entity\AlumnoDimension;
use Netpublic\CoreBundle\Form\Type\AlumnoDimensionType;
use Netpublic\CoreBundle\Entity\Colegio;
use Netpublic\CoreBundle\Entity\Alumno;
use Netpublic\CoreBundle\Entity\Asignatura;
use Netpublic\CoreBundle\Entity\Dimension;
use Netpublic\CoreBundle\Entity\Profesor;

/**
 * GrupoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GrupoRepository extends EntityRepository
{
    public function findFallasAlumnoAsignaturaProfesor($alumno_id,Dimension $periodo, $asignatura_id){
            $em=  $this->getEntityManager();
            $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
            $query.=" WHERE";
            $query.=" (";
            $query.=" d.padre=:periodo_id";
            $query.=" AND a.id=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
            $query.=" AND d.tipo=3)"; 
            $query.=" ORDER BY a_d.id DESC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id,
                                          ))->getResult(); 

             
            return $entities;  
    }
                    
    public function findNotaAlumnoAsignaturaProfesor($grupo_id,$profesor_id,Dimension $periodo, $asignatura_id){
            $em=  $this->getEntityManager();
            $query="SELECT a_d,d,a FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.alumno a";
            $query.=" WHERE (d.padre=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a.grupo=:grupo_id";
	    $query.=" AND d.profesor=:profesor_id";
            $query.=" AND d.tipo=4)";
            $query.=" OR (";
            $query.=" a_d.dimension=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a.grupo=:grupo_id";
	    $query.=" AND d.tipo=:tipo_periodo)";            
            $query.=" OR (";
            $query.=" d.padre=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a.grupo=:grupo_id";
	    $query.=" AND d.tipo=3)"; 
            $query.=" ORDER BY a.apellido ASC, a.apellido1, a.nombre,a.nombre1,";
            
            $query.=" a_d.id DESC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "grupo_id"=>$grupo_id,
                                         "profesor_id"=>$profesor_id,
                                         "tipo_periodo"=>$periodo->getTipo()
                                      ))->getResult(); 


            return $entities;  
    }
  
    public function getNotaPeriodo($alumno_id,Dimension $padre, $asignatura_id){
            $em=  $this->getEntityManager();
            $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
            $query.=" WHERE (a_d.dimension=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
	    $query.=" AND  d.tipo=1)";
            $entity=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$padre->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id                                         
                                      ))->getOneOrNullResult(); 


            return $entity;  
    }
   
    public function getNotasHijos($alumno_id,$profesor_id,Dimension $padre, $asignatura_id,$tipo=0){
            $em=  $this->getEntityManager();
            $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
            $query.=" WHERE ( (d.padre=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
	    //$query.=" AND d.profesor=:profesor_id";
            $query.="  AND  d.tipo=4)";
            $query.=" OR (d.padre=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
	    $query.="  AND  d.tipo=3))";
            //if($tipo==0)
            $query.=" ORDER BY d.orden DESC";
            //else{
            //$query.=" ORDER BY a_d.id DESC";
                
            //}
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$padre->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id,
              //                           "profesor_id"=>$profesor_id
                                         
                                      ))->getResult(); 


            return $entities;  
    }
    public function getNotaAlumnoPeriodos($alumno_id,$profesor_id,Dimension $padre, $asignatura_id,$tipo=0){
            $em=  $this->getEntityManager();
            $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
            $query.=" WHERE ( ";
            $query.=" d.padre=:periodo_id";
            $query.=" AND a_d.asignatura=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
	    $query.=" AND  d.tipo=1)";
            //if($tipo==0)
            $query.=" ORDER BY d.orden DESC";
            //else{
            //$query.=" ORDER BY a_d.id DESC";
                
           // }
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$padre->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id,
              //                           "profesor_id"=>$profesor_id
                                         
                                      ))->getResult(); 


            return $entities;  
    }
    public function getAcumuladoAlumnoPeriodos($alumno_id,$profesor_id,Dimension $padre, $asignatura_id,$tipo=0){
            $em=  $this->getEntityManager();
            $query="SELECT a_d,d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d";
            $query.=" WHERE ( ";
            //$query.=" d.padre=:periodo_id";
            $query.="  a_d.asignatura=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
	    $query.=" AND  d.tipo=2)";
            if($tipo==0)
            $query.=" ORDER BY a_d.id ASC";
            else{
            $query.=" ORDER BY a_d.id DESC";
                
            }
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                        // "periodo_id"=>$padre->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id,
              //                           "profesor_id"=>$profesor_id
                                         
                                      ))->getResult(); 
            $promedio=0;
            $nro_notas=0;
            foreach ($entities as $e) {
                $promedio=$promedio+$e->getNota();
                $nro_notas++;
            }
            if($nro_notas>0)
                $promedio=$promedio/$nro_notas;
            return $promedio;  
    }

    
    public function findNroAlumnoAsignaturaSinPadreProfesor($alumno_id,$profesor_id,Dimension $periodo, $asignatura_id){
            $em=  $this->getEntityManager();
            $query="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
            $query.=" WHERE (d.padre=:periodo_id";
            $query.=" AND a.id=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
	    $query.=" AND d.profesor=:profesor_id";
            $query.=" AND d.tipo=4)";
         
            $query.=" ORDER BY a_d.id DESC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id,
                                         "profesor_id"=>$profesor_id
                                         
                                      ))->getSingleScalarResult(); 


            return $entities;  
    }
    
    public function findNotaAlumnoAsignaturaPadreProfesor($alumno_id,$profesor_id,Dimension $periodo, $asignatura_id){
            $em=  $this->getEntityManager();
            $query="SELECT a_d FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
            $query.=" WHERE (";
            $query.=" a_d.dimension=:periodo_id";
            $query.=" AND a.id=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";			
            $query.=" AND d.tipo=:tipo_periodo)";            
            $query.=" OR (";
            $query.=" d.padre=:periodo_id";
            $query.=" AND a.id=:asignatura_id";
            $query.=" AND a_d.alumno=:alumno_id";
            $query.=" AND d.tipo=3)"; 
            $query.=" ORDER BY a_d.id DESC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno_id,
                                         //"profesor_id"=>$profesor_id,
                                         "tipo_periodo"=>$periodo->getTipo()
                                      ))->getResult(); 


            return $entities;  
    }
    
        public function findNroErrores($carga_academica,$periodo){
            $asignatura_id=$carga_academica->getAsignatura()->getId();
            $nro=0;
            $em=  $this->getEntityManager();
            $alumnos=$this->getEntityManager()->getRepository("NetpublicCoreBundle:Alumno")->findBy(array(
                'grupo'=>$carga_academica->getGrupo()->getId()
            ));
            foreach ($alumnos as $alumno) {
                
                $query="SELECT count(a_d) FROM NetpublicCoreBundle:AlumnoDimension a_d JOIN a_d.dimension d JOIN a_d.asignatura a";
                $query.=" WHERE (d.padre=:periodo_id";
                $query.=" AND a.id=:asignatura_id";
                $query.=" AND a_d.alumno=:alumno_id";
                $query.=" AND d.profesor=:profesor_id";
                $query.=" AND a_d.es_error=1";            
                $query.=" AND d.tipo=4)";
                
            
         
            
                $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "periodo_id"=>$periodo->getId(),
                                         "asignatura_id"=>$asignatura_id,
                                         "alumno_id"=>$alumno->getId(),
                                         "profesor_id"=>$carga_academica->getProfesor()->getId()
                                      ))->getSingleScalarResult(); 
                $nro=$nro+$entities;

            }
            return $nro;  
    }
    

    
    public function updateNotasJson($notasisXml,$id_asignatura){
          $emisXml=$this->getEntityManager();  
          $sede_principal=  $this
                              ->getEntityManager()
                              ->getRepository("NetpublicCoreBundle:Colegio")
                              ->findOneBy(array(
                                  "es_principal"=>TRUE
                              ));
          $re_alumno_notaisXml=$this->getEntityManager()->getRepository('NetpublicCoreBundle:AlumnoDimension');
          for ($index1 = 0; $index1 < count($notasisXml); $index1++) {
                 //Se toma el ID AlumnoDimension
                 $id_nota_alumnoisXml=$notasisXml[$index1]['id_nota_alumno'];
                //Se toma el valor de la nota
                 $notaisXml=$notasisXml[$index1]['valor_nota'];                       
               //Se verifica que existan elementos a actualizar
                 if($id_nota_alumnoisXml){                           
                        $entityisXml=$re_alumno_notaisXml->find($id_nota_alumnoisXml);
                        $dimension_padre=$entityisXml->getDimension()->getPadre()->getId();
                        $entityisXml->setNota($notaisXml);
                        $id_alumnoisXml=$entityisXml->getAlumno()->getId();
                        //Buscamos las otras notas de estudiante, grupo,asignatura                            
                        $emisXml->persist($entityisXml);
                        $emisXml->flush();
                        $queryisXml = $emisXml->createQuery('SELECT p FROM NetpublicCoreBundle:AlumnoDimension p JOIN p.dimension d JOIN p.alumno a WHERE d.padre=:id_padre AND d.tipo=4 AND p.asignatura=:id_asignatura AND a.id=:id_alumno')
                                              ->setParameters(array(
                                                            "id_padre"=>$dimension_padre,
                                                            "id_asignatura"=>$id_asignatura,                            
                                                            "id_alumno"=>$id_alumnoisXml,
                                                        ));
                        //$entitiesisXml = $queryisXml->getArrayResult();
                        $entitiesisXml = $queryisXml->getResult();
                        //echo $entities[$index1];
                        //Promediamos y guardadomos
                        $promedioisXml=0;
                        $numero_notaisXml=0;
                        foreach ($entitiesisXml as $eisXml) {
                                 //$promedioisXml=$promedioisXml+$eisXml['nota'];
                                 $porcetaje=$eisXml->getDimension()->getPonderado();
                                 $promedioisXml=$promedioisXml+$eisXml->getNota()*$porcetaje;
                                 $numero_notaisXml=$numero_notaisXml+$porcetaje;
                        }
                        $promedioisXml=$promedioisXml/$numero_notaisXml;
                        //Buscamos la nota del alumno para la dimension padre
                        $queryisXml = $emisXml->createQuery('SELECT p FROM NetpublicCoreBundle:AlumnoDimension p JOIN p.dimension d JOIN p.alumno a WHERE p.dimension=:id_dimension AND p.asignatura=:id_asignatura AND a.id=:id_alumno')
                                              ->setParameters(array(
                                                       "id_dimension"=>$dimension_padre,
                                                       "id_asignatura"=>$id_asignatura,                            
                                                       "id_alumno"=>$id_alumnoisXml,
                                                 ));
                         $entitiesisXml = $queryisXml->getResult();
                         $nota111isXml=$entitiesisXml[0]->getNota();
                         $entitiesisXml[0]->setNota(number_format ($promedioisXml,1,$dec_point = '.' ,',' ));
                         $emisXml->persist($entitiesisXml[0]);                    
                         $emisXml->flush();
                       }     
                   }
                   return;
   }
   public function getEntities_Form_FormView($id_grupo,$id_asignatura,$id_dimension,  \Netpublic\CoreBundle\Controller\GrupoController $controller){
       $em=  $this->getEntityManager();
       $repository=$em->getRepository("NetpublicCoreBundle:Dimension");        
       $dim_grupo_padre=$repository->findBy(array(
           'padre'=>$id_dimension,
           'tipo' =>4
           ));       
       $entities=array();
       $form_t=array();
       $form_view_t=array();
       $form=array();
       $form_view=array();
       foreach ($dim_grupo_padre as $dim_hija) {                                 
          $query = $em->createQuery('SELECT p FROM NetpublicCoreBundle:AlumnoDimension p JOIN p.dimension d JOIN p.alumno a WHERE d.id=:id_dimension AND a.grupo=:id_grupo AND p.asignatura=:id_asignatura')
                      ->setParameters(
                        array(
                            "id_dimension"=>$dim_hija->getId(),
                            "id_asignatura"=>$id_asignatura,
                            "id_grupo"=>$id_grupo
                            ));
        
          $entities[]= $query->getResult();
        }
        //Asistencia
        $dim_grupo_asistencia=$repository->findBy(array(
           'padre'=>$id_dimension,
           'tipo' =>3
           ));
        foreach ($dim_grupo_asistencia as $dim_hija) {                                 
          $query = $em->createQuery('SELECT p FROM NetpublicCoreBundle:AlumnoDimension p JOIN p.dimension d JOIN p.alumno a WHERE d.id=:id_dimension AND a.grupo=:id_grupo AND p.asignatura=:id_asignatura')
                      ->setParameters(
                        array(
                            "id_dimension"=>$dim_hija->getId(),
                            "id_asignatura"=>$id_asignatura,
                            "id_grupo"=>$id_grupo
                            ));
        
          $entities[]= $query->getResult();
        }
        //Periodo Academico
        $query = $em->createQuery('SELECT p FROM NetpublicCoreBundle:AlumnoDimension p JOIN p.dimension d JOIN p.alumno a WHERE d.id=:id_dimension AND a.grupo=:id_grupo AND p.asignatura=:id_asignatura')
                    ->setParameters(
                        array(
                            "id_dimension"=>$id_dimension,
                            "id_asignatura"=>$id_asignatura,
                            "id_grupo"=>$id_grupo));        
        $entities[]= $query->getResult();        
        foreach ($entities as $e) {                   
            for ($index = 0; $index < count($e); $index++) {                             
                 
                 $form_t[$index]= $controller->createForm(new AlumnoDimensionType($e[$index]->getId()), $e[$index]);
                 $form_view_t[$index]=$form_t[$index]->createView();                        
            }
            $form[]=$form_t;
            $form_view[]=$form_view_t;
        }
        return array($entities,$form,$form_view);
   }
   public function findGrupos($grado_id) {
        $query="SELECT g FROM NetpublicCoreBundle:Grupo g";
        $query.=" WHERE (g.grado=:grado_id";
        $query.=" )";                          
        $nro=  $this->getEntityManager()
                    ->createQuery($query)                
                    ->setParameters(array(
                                            "grado_id"=>$grado_id,                                   
                    ))->getResult();
                             
        return $nro;
    
}
public function findNotasPeriodoEscolar($alumnos,$perido_componente_id,$asg_id) {
        $em=  $this->getEntityManager();
        $entities=array();
        $a_t=array();
        foreach ($alumnos as $alumno) {
            $notas=$em->getRepository("NetpublicCoreBundle:Alumno")
                      ->findNotas($alumno->getId(),$perido_componente_id,$asg_id);
            
            foreach ($notas as $nota) {
                $a_t[]=$nota;
            }
            $entities[]=$a_t;
            $a_t=array();
        }
        return $entities;
    
}
    
  

}
