<?php

namespace Netpublic\RedsaberBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AlumnoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreguntaRepository extends EntityRepository
{
    public function findPreguntasBancoDatos($limite_inferior,$limte_superior,$examen_id){
            $em=  $this->getEntityManager();
            $query="SELECT p_e,p,e FROM NetpublicRedsaberBundle:PreguntaExamen p_e JOIN p_e.examen e JOIN p_e.pregunta p ";
            $query.=" WHERE (";
            $query.=" p_e.posicion>=:limite_inferior ";
            $query.=" AND p_e.posicion<=:limte_superior ";            
            $query.=" AND p_e.examen=:examen_id ";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                       "limte_superior"=>$limte_superior,
                                        "limite_inferior"=>$limite_inferior,
                                       "examen_id"=>$examen_id
                                       ))->getResult(); 
            return $entities;  
    }
    public function findPreguntasPosicionBancoDatos($posicion,$examen_id){
            $em=  $this->getEntityManager();
            $query="SELECT p_e,p,e FROM NetpublicRedsaberBundle:PreguntaExamen p_e JOIN p_e.examen e JOIN p_e.pregunta p ";
            $query.=" WHERE (";
            $query.=" p_e.posicion=:posicion ";
            $query.=" AND p_e.examen=:examen_id ";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                       "posicion"=>$posicion,
                                        "examen_id"=>$examen_id
                                       ))->getOneOrNullResult(); 
            return $entities;  
    }
    public function findNroPreguntasOKNOK($indice,$label_ok,$examen_id){
            $em=  $this->getEntityManager();
            
            $query="SELECT r FROM NetpublicRedsaberBundle:Respueta r ";
            $query.=" WHERE (";
            $query.=" r.tipo=1";
            $query.=" AND r.indice=:indice";
            $query.=" AND r.examen=:examen_id ";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                       "indice"=>$indice,
                                       "examen_id"=>$examen_id
                                       ))->getResult(); 
            $c_ok=0;
            $c_nok=0;
            foreach ($entities as $e) {
                 $bubles=$e->getBuble();
                 foreach ($bubles as $b) {
                     if($b->getLabel()==$label_ok){
                         if($b->getEstado()==1)
                             $c_ok++;
                         else
                             $c_nok++;
                     }
                 }
            }
            $resultado=array("nro_ok"=>$c_ok,"nor_nok"=>$c_nok);
            return $resultado;  
    }
 
   public function findPreguntasBancoDatosPorComponente($componente_id,$examen_id){
            $em=  $this->getEntityManager();
            $query="SELECT p_e,c,p FROM NetpublicRedsaberBundle:PreguntaExamen p_e JOIN p_e.examen e JOIN p_e.pregunta p JOIN p.componente c ";
            $query.=" WHERE (";
            $query.=" c.id=:componente_id ";       
            $query.=" AND p_e.examen=:examen_id ";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                       "componente_id"=>$componente_id,
                                       "examen_id"=>$examen_id
                                       ))->getResult(); 
            return $entities;  
    }
 
   public function mostrarMatrixTipo($examen,$tipo){
            $em=  $this->getEntityManager();
            $query="SELECT b,p FROM NetpublicRedsaberBundle:Buble b JOIN b.respuesta p ";
            $query.=" WHERE (";
            $query.=" p.tipo=:tipo";
            $query.=" AND p.examen=:examen_id";            
            $query.=" ";
            $query.=" )"; 
            $query.=" ORDER BY p.bloque ASC,b.label ASC,";            
            $query.=" p.indice ASC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "tipo"=>$tipo,
                                         "examen_id"=>$examen->getId()
                                         ))->getResult(); 
            $matrix=array();
            $index3=0;
            for ($index1 = 0; $index1 < 4; $index1++) {
                for ($index = 0; $index < $examen->getNroPreguntas(); $index++) {
                     $matrix[$index1][$index]=$entities[$index3];
                     $index3++;
                }
            }
            return $matrix;  
    }
    public function findBublesAlumnosPorcentajes($examen,$tipo=0){
            $em=  $this->getEntityManager();
            $query="SELECT b,p FROM NetpublicRedsaberBundle:Buble b JOIN b.respuesta p ";
            $query.=" WHERE (";
            $query.=" ";
            $query.=" p.examen=:examen_id";  
            $query.=" AND p.tipo=2";  
            
            $query.=" ";
            $query.=" )"; 
            if($tipo==0){
                $query.=" ORDER BY  p.indice ASC,";            
                $query.=" b.label ASC";
            }
            if($tipo==1){
                $query.=" ORDER BY  b.label ASC,";            
                $query.=" p.indice ASC";
                
            }
            
            
            //$query.=" ORDER BY a.apellido ASC, a.apellido1, a.nombre,a.nombre1 DESC ";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(                                        
                                         "examen_id"=>$examen->getId()
                                         ))->getResult(); 

            $matrix=array();
            if($tipo==0){

            $index4=0;
            $ls_c=18;
            $valor_entero=  intval($examen->getNroPreguntas()/18);
            $nro_bloques=$valor_entero;
            for ($index1 = 0; $index1 < $nro_bloques+1; $index1++) {
                $li=$index1*4;
                $ls=$li+4;
                if($index1==($nro_bloques))
                    $ls_c=$examen->getNroPreguntas()-(($nro_bloques)*18);
                for ($index2 = 0; $index2 < $ls_c; $index2++) {
                    for ($index3 = $li; $index3 < $ls; $index3++) {
                       $matrix[$index3][$index2]=$entities[$index4];                     
                       $index4++;
                    }
                }
            }
            }
            if($tipo==1){
                $index4=0;
                for ($index = 0; $index < 4; $index++) {
                    for ($index5 = 0; $index5 < $examen->getNroPreguntas(); $index5++) {
                        $matrix[$index][$index5]=$entities[$index4];
                        $index4++;
                    }
                }
            }
   /**         for ($index6 = 0; $index6 <16; $index6++) {
                for ($index7 = 0; $index7 < 18; $index7++) {
                    echo $matrix[$index6][$index7]->getEstado();
                }
                echo "<br/>";
            }
*/
            return $matrix;  
    }
    public function findBublesRepuestasCorrectas($examen,$tipo=0){
            $em=  $this->getEntityManager();
            $query="SELECT b,p FROM NetpublicRedsaberBundle:Buble b JOIN b.respuesta p ";
            $query.=" WHERE (";
            $query.=" ";
            $query.=" p.examen=:examen_id";  
            $query.=" AND p.tipo=3";  
            
            $query.=" ";
            $query.=" )"; 
            if($tipo==0){
                $query.=" ORDER BY  p.indice ASC,";            
                $query.=" b.label ASC";
            }
            if($tipo==1){
                $query.=" ORDER BY  b.label ASC,";            
                $query.=" p.indice ASC";
                
            }
            
            //$query.=" ORDER BY a.apellido ASC, a.apellido1, a.nombre,a.nombre1 DESC ";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(                                        
                                         "examen_id"=>$examen->getId()
                                         ))->getResult(); 

            $matrix=array();
            if($tipo==0){

            $index4=0;
            $ls_c=18;
            $valor_entero=  intval($examen->getNroPreguntas()/18);
            $nro_bloques=$valor_entero;
            for ($index1 = 0; $index1 < $nro_bloques+1; $index1++) {
                $li=$index1*4;
                $ls=$li+4;
                if($index1==($nro_bloques))
                    $ls_c=$examen->getNroPreguntas()-(($nro_bloques)*18);
                for ($index2 = 0; $index2 < $ls_c; $index2++) {
                    for ($index3 = $li; $index3 < $ls; $index3++) {
                       $matrix[$index3][$index2]=$entities[$index4];                     
                       $index4++;
                    }
                }
            }
            }
            if($tipo==1){
                $index4=0;
                for ($index = 0; $index < 4; $index++) {
                    for ($index5 = 0; $index5 < $examen->getNroPreguntas(); $index5++) {
                        $matrix[$index][$index5]=$entities[$index4];
                        $index4++;
                    }
                }
            }
/*            for ($index6 = 0; $index6 <16; $index6++) {
                for ($index7 = 0; $index7 < 18; $index7++) {
                    echo $matrix[$index6][$index7]->getEstado();
                }
                echo "<br/>";
            }
 * 
 */
            return $matrix;  
    }

    public function findPreguntaGrupo($alumno_id,$examen){
            $em=  $this->getEntityManager();
            $query="SELECT b,p FROM NetpublicRedsaberBundle:Buble b JOIN b.respuesta p ";
            $query.=" WHERE (";
            $query.=" p.alumno_referencia=:alumno_id";
            $query.=" AND p.examen=:examen_id";  
            $query.=" AND p.tipo=1";  
            //$query.=" AND p.indice<=:nro_preguntas";  
            $query.=" ";
            $query.=" )"; 
            $query.=" ORDER BY b.label ASC,";
            $query.=" p.indice ASC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "alumno_id"=>$alumno_id,
                                         "examen_id"=>$examen->getId(),
              //                           "nro_preguntas"=>$examen->getNroPreguntas()
                                         ))->getResult(); 
            return $entities;   
    }
        public function findBublesTodosAlumos($examen){
            $em=  $this->getEntityManager();
            $query="SELECT b,p FROM NetpublicRedsaberBundle:Buble b JOIN b.respuesta p ";
            $query.=" WHERE (";
            $query.=" p.examen=:examen_id";  
            $query.=" AND p.tipo=1";  
            //$query.=" AND p.indice<=:nro_preguntas";  
            $query.=" ";
            $query.=" )"; 
            $query.=" ORDER BY b.label ASC,";
            $query.=" p.indice ASC";
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "examen_id"=>$examen->getId(),
              //                           "nro_preguntas"=>$examen->getNroPreguntas()
                                         ))->getResult(); 
            return $entities;   
    }

    public function findPreguntaGrupoMatrix($alumno_id,$examen,$tipo=0){
            $em=  $this->getEntityManager();
            $query="SELECT b,p FROM NetpublicRedsaberBundle:Buble b JOIN b.respuesta p ";
            $query.=" WHERE (";
            $query.=" p.alumno_referencia=:alumno_id";
            $query.=" AND p.examen=:examen_id";            
            $query.=" ";
            $query.=" )";
            if($tipo==0){
                $query.=" ORDER BY  p.indice ASC,";            
                $query.=" b.label ASC";
            }
            if($tipo==1){
                $query.=" ORDER BY  b.label ASC,";            
                $query.=" p.indice ASC";
                
            }
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "alumno_id"=>$alumno_id,
                                         "examen_id"=>$examen->getId()
                                         ))->getResult(); 

            
            $matrix=array();
            if($tipo==0){
                $index4=0;
                $ls_c=18;
                $valor_entero=  intval($examen->getNroPreguntas()/18);
                $nro_bloques=$valor_entero;
                for ($index1 = 0; $index1 < $nro_bloques+1; $index1++) {
                    $li=$index1*4;
                    $ls=$li+4;
                    if($index1==($nro_bloques))
                        $ls_c=$examen->getNroPreguntas()-(($nro_bloques)*18);
                    for ($index2 = 0; $index2 < $ls_c; $index2++) {
                        for ($index3 = $li; $index3 < $ls; $index3++) {
                           $matrix[$index3][$index2]=$entities[$index4];                     
                           $index4++;
                        }
                    }

                }
            }
            if($tipo==1){
                $index4=0;
                for ($index = 0; $index < 4; $index++) {
                    for ($index5 = 0; $index5 < $examen->getNroPreguntas(); $index5++) {
                        $matrix[$index][$index5]=$entities[$index4];
                        $index4++;
                    }
                }
            }
 /*           for ($index6 = 0; $index6 <16; $index6++) {
                for ($index7 = 0; $index7 < 18; $index7++) {
                    echo " ".$matrix[$index6][$index7]->getEstado()." ";
                }
                echo "<br/>";
            }
            echo "<br/>-----------------------------------------------------<br/>";
   */         return $matrix;  
    }
    
    public function findPreguntasExamen($examen_id){
            $em=  $this->getEntityManager();
            $query="SELECT b,p,e FROM NetpublicRedsaberBundle:PreguntaExamen b JOIN b.pregunta p JOIN b.examen e ";
            $query.=" WHERE (";
            $query.=" b.examen=:examen_id";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "examen_id"=>$examen_id
                                         ))->getResult(); 


            return $entities;  
    }
    public function esPregunta($examen_id,$indice) {
        $em=  $this->getEntityManager();
            $query="SELECT count(p) FROM NetpublicRedsaberBundle:PreguntaExamen p_e ";
            $query.=" WHERE (";
            $query.=" p.indice=:indice";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "indice"=>$indice
                                         ))->getResult(); 


    }
    public function findPreguntasCuerpoId($pregunta_id,$cuerpo){
            $em=  $this->getEntityManager();
            $query="SELECT p FROM NetpublicRedsaberBundle:Pregunta p JOIN p.contenido c ";
            $query.=" WHERE (";
            $query.=" p.id=:pregunta_id";
            $query.=" AND c.cuerpo=:cuerpo";
            $query.=" )"; 
            $entities=$em->createQuery($query)                
                                 ->setParameters(array(
                                         "pregunta_id"=>$pregunta_id,
                                         "cuerpo"=>$cuerpo
                                         ))->getOneOrNullResult(); 


            return $entities;  
    }
    
 
}
